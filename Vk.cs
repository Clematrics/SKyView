using System;
using System.Runtime.InteropServices;

namespace SkyView {
    unsafe public static class Vk {

        public static uint API_VERSION = MAKE_VERSION(1, 0, 3);
        public static void* NULL_HANDLE = null;

        public static uint MAKE_VERSION(uint major, uint minor, uint patch) { return (((major) << 22) | ((minor) << 12) | (patch)); }
        public static uint VERSION_MAJOR(uint version) { return ((uint)(version) >> 22); }
        public static uint VERSION_MINOR(uint version) { return (((uint)(version) >> 12) & 0x3ff); }
        public static uint VERSION_PATCH(uint version) { return ((uint)(version) & 0xfff); }

        public const float LOD_CLAMP_NONE = 1000.0f;
        public const uint REMAINING_MIP_LEVELS = (~0U);
        public const uint REMAINING_ARRAY_LAYERS = (~0U);
        public const ulong WHOLE_SIZE = (~0UL);
        public const uint ATTACHMENT_UNUSED = (~0U);
        public const int TRUE = 1;
        public const int FALSE = 0;
        public const uint QUEUE_FAMILY_IGNORED = (~0U);
        public const uint SUBPASS_EXTERNAL = (~0U);
        public const int MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
        public const int UUID_SIZE = 16;
        public const int MAX_MEMORY_TYPES = 32;
        public const int MAX_MEMORY_HEAPS = 16;
        public const int MAX_EXTENSION_NAME_SIZE = 256;
        public const int MAX_DESCRIPTION_SIZE = 256;

        public struct Instance { }
        public struct PhysicalDevice { }
        public struct Device { }
        public struct Queue { }
        public struct Semaphore { }
        public struct CommandBuffer { }
        public struct Fence { }
        public struct DeviceMemory { }
        public struct Buffer { }
        public struct Image { }
        public struct Event { }
        public struct QueryPool { }
        public struct BufferView { }
        public struct ImageView { }
        public struct ShaderModule { }
        public struct PipelineCache { }
        public struct PipelineLayout { }
        public struct RenderPass { }
        public struct Pipeline { }
        public struct DescriptorSetLayout { }
        public struct Sampler { }
        public struct DescriptorPool { }
        public struct DescriptorSet { }
        public struct Framebuffer { }
        public struct CommandPool { }


        public enum PipelineCacheHeaderVersion {
            VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
            VK_PIPELINE_CACHE_HEADER_VERSION_BEGIN_RANGE = VK_PIPELINE_CACHE_HEADER_VERSION_ONE,
            VK_PIPELINE_CACHE_HEADER_VERSION_END_RANGE = VK_PIPELINE_CACHE_HEADER_VERSION_ONE,
            VK_PIPELINE_CACHE_HEADER_VERSION_RANGE_SIZE = (VK_PIPELINE_CACHE_HEADER_VERSION_ONE - VK_PIPELINE_CACHE_HEADER_VERSION_ONE + 1),
            VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF
        }
        public enum Result {
            VK_SUCCESS = 0,
            VK_NOT_READY = 1,
            VK_TIMEOUT = 2,
            VK_EVENT_SET = 3,
            VK_EVENT_RESET = 4,
            VK_INCOMPLETE = 5,
            VK_ERROR_OUT_OF_HOST_MEMORY = -1,
            VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
            VK_ERROR_INITIALIZATION_FAILED = -3,
            VK_ERROR_DEVICE_LOST = -4,
            VK_ERROR_MEMORY_MAP_FAILED = -5,
            VK_ERROR_LAYER_NOT_PRESENT = -6,
            VK_ERROR_EXTENSION_NOT_PRESENT = -7,
            VK_ERROR_FEATURE_NOT_PRESENT = -8,
            VK_ERROR_INCOMPATIBLE_DRIVER = -9,
            VK_ERROR_TOO_MANY_OBJECTS = -10,
            VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
            VK_ERROR_SURFACE_LOST_KHR = -1000000000,
            VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
            VK_SUBOPTIMAL_KHR = 1000001003,
            VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
            VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
            VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
            VK_RESULT_BEGIN_RANGE = VK_ERROR_FORMAT_NOT_SUPPORTED,
            VK_RESULT_END_RANGE = VK_INCOMPLETE,
            VK_RESULT_RANGE_SIZE = (VK_INCOMPLETE - VK_ERROR_FORMAT_NOT_SUPPORTED + 1),
            VK_RESULT_MAX_ENUM = 0x7FFFFFFF
        }
        public enum StructureType {
            VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
            VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
            VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
            VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
            VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
            VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
            VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
            VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
            VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
            VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
            VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
            VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
            VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
            VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
            VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
            VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
            VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
            VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
            VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
            VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
            VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
            VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
            VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
            VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
            VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
            VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
            VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
            VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
            VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
            VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
            VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
            VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
            VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
            VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
            VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
            VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
            VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
            VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
            VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
            VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
            VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
            VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
            VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
            VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
            VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
            VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
            VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
            VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
            VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
            VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
            VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
            VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
            VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR = 1000007000,
            VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
            VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
            VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000,
            VK_STRUCTURE_TYPE_BEGIN_RANGE = VK_STRUCTURE_TYPE_APPLICATION_INFO,
            VK_STRUCTURE_TYPE_END_RANGE = VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,
            VK_STRUCTURE_TYPE_RANGE_SIZE = (VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO - VK_STRUCTURE_TYPE_APPLICATION_INFO + 1),
            VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum SystemAllocationScope {
            VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
            VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
            VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
            VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
            VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
            VK_SYSTEM_ALLOCATION_SCOPE_BEGIN_RANGE = VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,
            VK_SYSTEM_ALLOCATION_SCOPE_END_RANGE = VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE,
            VK_SYSTEM_ALLOCATION_SCOPE_RANGE_SIZE = (VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE - VK_SYSTEM_ALLOCATION_SCOPE_COMMAND + 1),
            VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum InternalAllocationType {
            VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
            VK_INTERNAL_ALLOCATION_TYPE_BEGIN_RANGE = VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,
            VK_INTERNAL_ALLOCATION_TYPE_END_RANGE = VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,
            VK_INTERNAL_ALLOCATION_TYPE_RANGE_SIZE = (VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE - VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE + 1),
            VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum Format {
            VK_FORMAT_UNDEFINED = 0,
            VK_FORMAT_R4G4_UNORM_PACK8 = 1,
            VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
            VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
            VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
            VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
            VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
            VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
            VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
            VK_FORMAT_R8_UNORM = 9,
            VK_FORMAT_R8_SNORM = 10,
            VK_FORMAT_R8_USCALED = 11,
            VK_FORMAT_R8_SSCALED = 12,
            VK_FORMAT_R8_UINT = 13,
            VK_FORMAT_R8_SINT = 14,
            VK_FORMAT_R8_SRGB = 15,
            VK_FORMAT_R8G8_UNORM = 16,
            VK_FORMAT_R8G8_SNORM = 17,
            VK_FORMAT_R8G8_USCALED = 18,
            VK_FORMAT_R8G8_SSCALED = 19,
            VK_FORMAT_R8G8_UINT = 20,
            VK_FORMAT_R8G8_SINT = 21,
            VK_FORMAT_R8G8_SRGB = 22,
            VK_FORMAT_R8G8B8_UNORM = 23,
            VK_FORMAT_R8G8B8_SNORM = 24,
            VK_FORMAT_R8G8B8_USCALED = 25,
            VK_FORMAT_R8G8B8_SSCALED = 26,
            VK_FORMAT_R8G8B8_UINT = 27,
            VK_FORMAT_R8G8B8_SINT = 28,
            VK_FORMAT_R8G8B8_SRGB = 29,
            VK_FORMAT_B8G8R8_UNORM = 30,
            VK_FORMAT_B8G8R8_SNORM = 31,
            VK_FORMAT_B8G8R8_USCALED = 32,
            VK_FORMAT_B8G8R8_SSCALED = 33,
            VK_FORMAT_B8G8R8_UINT = 34,
            VK_FORMAT_B8G8R8_SINT = 35,
            VK_FORMAT_B8G8R8_SRGB = 36,
            VK_FORMAT_R8G8B8A8_UNORM = 37,
            VK_FORMAT_R8G8B8A8_SNORM = 38,
            VK_FORMAT_R8G8B8A8_USCALED = 39,
            VK_FORMAT_R8G8B8A8_SSCALED = 40,
            VK_FORMAT_R8G8B8A8_UINT = 41,
            VK_FORMAT_R8G8B8A8_SINT = 42,
            VK_FORMAT_R8G8B8A8_SRGB = 43,
            VK_FORMAT_B8G8R8A8_UNORM = 44,
            VK_FORMAT_B8G8R8A8_SNORM = 45,
            VK_FORMAT_B8G8R8A8_USCALED = 46,
            VK_FORMAT_B8G8R8A8_SSCALED = 47,
            VK_FORMAT_B8G8R8A8_UINT = 48,
            VK_FORMAT_B8G8R8A8_SINT = 49,
            VK_FORMAT_B8G8R8A8_SRGB = 50,
            VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
            VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
            VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
            VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
            VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
            VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
            VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
            VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
            VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
            VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
            VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
            VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
            VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
            VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
            VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
            VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
            VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
            VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
            VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
            VK_FORMAT_R16_UNORM = 70,
            VK_FORMAT_R16_SNORM = 71,
            VK_FORMAT_R16_USCALED = 72,
            VK_FORMAT_R16_SSCALED = 73,
            VK_FORMAT_R16_UINT = 74,
            VK_FORMAT_R16_SINT = 75,
            VK_FORMAT_R16_SFLOAT = 76,
            VK_FORMAT_R16G16_UNORM = 77,
            VK_FORMAT_R16G16_SNORM = 78,
            VK_FORMAT_R16G16_USCALED = 79,
            VK_FORMAT_R16G16_SSCALED = 80,
            VK_FORMAT_R16G16_UINT = 81,
            VK_FORMAT_R16G16_SINT = 82,
            VK_FORMAT_R16G16_SFLOAT = 83,
            VK_FORMAT_R16G16B16_UNORM = 84,
            VK_FORMAT_R16G16B16_SNORM = 85,
            VK_FORMAT_R16G16B16_USCALED = 86,
            VK_FORMAT_R16G16B16_SSCALED = 87,
            VK_FORMAT_R16G16B16_UINT = 88,
            VK_FORMAT_R16G16B16_SINT = 89,
            VK_FORMAT_R16G16B16_SFLOAT = 90,
            VK_FORMAT_R16G16B16A16_UNORM = 91,
            VK_FORMAT_R16G16B16A16_SNORM = 92,
            VK_FORMAT_R16G16B16A16_USCALED = 93,
            VK_FORMAT_R16G16B16A16_SSCALED = 94,
            VK_FORMAT_R16G16B16A16_UINT = 95,
            VK_FORMAT_R16G16B16A16_SINT = 96,
            VK_FORMAT_R16G16B16A16_SFLOAT = 97,
            VK_FORMAT_R32_UINT = 98,
            VK_FORMAT_R32_SINT = 99,
            VK_FORMAT_R32_SFLOAT = 100,
            VK_FORMAT_R32G32_UINT = 101,
            VK_FORMAT_R32G32_SINT = 102,
            VK_FORMAT_R32G32_SFLOAT = 103,
            VK_FORMAT_R32G32B32_UINT = 104,
            VK_FORMAT_R32G32B32_SINT = 105,
            VK_FORMAT_R32G32B32_SFLOAT = 106,
            VK_FORMAT_R32G32B32A32_UINT = 107,
            VK_FORMAT_R32G32B32A32_SINT = 108,
            VK_FORMAT_R32G32B32A32_SFLOAT = 109,
            VK_FORMAT_R64_UINT = 110,
            VK_FORMAT_R64_SINT = 111,
            VK_FORMAT_R64_SFLOAT = 112,
            VK_FORMAT_R64G64_UINT = 113,
            VK_FORMAT_R64G64_SINT = 114,
            VK_FORMAT_R64G64_SFLOAT = 115,
            VK_FORMAT_R64G64B64_UINT = 116,
            VK_FORMAT_R64G64B64_SINT = 117,
            VK_FORMAT_R64G64B64_SFLOAT = 118,
            VK_FORMAT_R64G64B64A64_UINT = 119,
            VK_FORMAT_R64G64B64A64_SINT = 120,
            VK_FORMAT_R64G64B64A64_SFLOAT = 121,
            VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
            VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
            VK_FORMAT_D16_UNORM = 124,
            VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
            VK_FORMAT_D32_SFLOAT = 126,
            VK_FORMAT_S8_UINT = 127,
            VK_FORMAT_D16_UNORM_S8_UINT = 128,
            VK_FORMAT_D24_UNORM_S8_UINT = 129,
            VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
            VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
            VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
            VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
            VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
            VK_FORMAT_BC2_UNORM_BLOCK = 135,
            VK_FORMAT_BC2_SRGB_BLOCK = 136,
            VK_FORMAT_BC3_UNORM_BLOCK = 137,
            VK_FORMAT_BC3_SRGB_BLOCK = 138,
            VK_FORMAT_BC4_UNORM_BLOCK = 139,
            VK_FORMAT_BC4_SNORM_BLOCK = 140,
            VK_FORMAT_BC5_UNORM_BLOCK = 141,
            VK_FORMAT_BC5_SNORM_BLOCK = 142,
            VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
            VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
            VK_FORMAT_BC7_UNORM_BLOCK = 145,
            VK_FORMAT_BC7_SRGB_BLOCK = 146,
            VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
            VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
            VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
            VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
            VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
            VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
            VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
            VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
            VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
            VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
            VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
            VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
            VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
            VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
            VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
            VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
            VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
            VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
            VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
            VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
            VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
            VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
            VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
            VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
            VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
            VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
            VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
            VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
            VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
            VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
            VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
            VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
            VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
            VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
            VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
            VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
            VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
            VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
            VK_FORMAT_BEGIN_RANGE = VK_FORMAT_UNDEFINED,
            VK_FORMAT_END_RANGE = VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
            VK_FORMAT_RANGE_SIZE = (VK_FORMAT_ASTC_12x12_SRGB_BLOCK - VK_FORMAT_UNDEFINED + 1),
            VK_FORMAT_MAX_ENUM = 0x7FFFFFFF
        }
        public enum ImageType {
            VK_IMAGE_TYPE_1D = 0,
            VK_IMAGE_TYPE_2D = 1,
            VK_IMAGE_TYPE_3D = 2,
            VK_IMAGE_TYPE_BEGIN_RANGE = VK_IMAGE_TYPE_1D,
            VK_IMAGE_TYPE_END_RANGE = VK_IMAGE_TYPE_3D,
            VK_IMAGE_TYPE_RANGE_SIZE = (VK_IMAGE_TYPE_3D - VK_IMAGE_TYPE_1D + 1),
            VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum ImageTiling {
            VK_IMAGE_TILING_OPTIMAL = 0,
            VK_IMAGE_TILING_LINEAR = 1,
            VK_IMAGE_TILING_BEGIN_RANGE = VK_IMAGE_TILING_OPTIMAL,
            VK_IMAGE_TILING_END_RANGE = VK_IMAGE_TILING_LINEAR,
            VK_IMAGE_TILING_RANGE_SIZE = (VK_IMAGE_TILING_LINEAR - VK_IMAGE_TILING_OPTIMAL + 1),
            VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF
        }
        public enum PhysicalDeviceType {
            VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
            VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
            VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
            VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
            VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
            VK_PHYSICAL_DEVICE_TYPE_BEGIN_RANGE = VK_PHYSICAL_DEVICE_TYPE_OTHER,
            VK_PHYSICAL_DEVICE_TYPE_END_RANGE = VK_PHYSICAL_DEVICE_TYPE_CPU,
            VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE = (VK_PHYSICAL_DEVICE_TYPE_CPU - VK_PHYSICAL_DEVICE_TYPE_OTHER + 1),
            VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum QueryType {
            VK_QUERY_TYPE_OCCLUSION = 0,
            VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
            VK_QUERY_TYPE_TIMESTAMP = 2,
            VK_QUERY_TYPE_BEGIN_RANGE = VK_QUERY_TYPE_OCCLUSION,
            VK_QUERY_TYPE_END_RANGE = VK_QUERY_TYPE_TIMESTAMP,
            VK_QUERY_TYPE_RANGE_SIZE = (VK_QUERY_TYPE_TIMESTAMP - VK_QUERY_TYPE_OCCLUSION + 1),
            VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum SharingMode {
            VK_SHARING_MODE_EXCLUSIVE = 0,
            VK_SHARING_MODE_CONCURRENT = 1,
            VK_SHARING_MODE_BEGIN_RANGE = VK_SHARING_MODE_EXCLUSIVE,
            VK_SHARING_MODE_END_RANGE = VK_SHARING_MODE_CONCURRENT,
            VK_SHARING_MODE_RANGE_SIZE = (VK_SHARING_MODE_CONCURRENT - VK_SHARING_MODE_EXCLUSIVE + 1),
            VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum ImageLayout {
            VK_IMAGE_LAYOUT_UNDEFINED = 0,
            VK_IMAGE_LAYOUT_GENERAL = 1,
            VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
            VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
            VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
            VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
            VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
            VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
            VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
            VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
            VK_IMAGE_LAYOUT_BEGIN_RANGE = VK_IMAGE_LAYOUT_UNDEFINED,
            VK_IMAGE_LAYOUT_END_RANGE = VK_IMAGE_LAYOUT_PREINITIALIZED,
            VK_IMAGE_LAYOUT_RANGE_SIZE = (VK_IMAGE_LAYOUT_PREINITIALIZED - VK_IMAGE_LAYOUT_UNDEFINED + 1),
            VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF
        }
        public enum ImageViewType {
            VK_IMAGE_VIEW_TYPE_1D = 0,
            VK_IMAGE_VIEW_TYPE_2D = 1,
            VK_IMAGE_VIEW_TYPE_3D = 2,
            VK_IMAGE_VIEW_TYPE_CUBE = 3,
            VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
            VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
            VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
            VK_IMAGE_VIEW_TYPE_BEGIN_RANGE = VK_IMAGE_VIEW_TYPE_1D,
            VK_IMAGE_VIEW_TYPE_END_RANGE = VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,
            VK_IMAGE_VIEW_TYPE_RANGE_SIZE = (VK_IMAGE_VIEW_TYPE_CUBE_ARRAY - VK_IMAGE_VIEW_TYPE_1D + 1),
            VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum ComponentSwizzle {
            VK_COMPONENT_SWIZZLE_IDENTITY = 0,
            VK_COMPONENT_SWIZZLE_ZERO = 1,
            VK_COMPONENT_SWIZZLE_ONE = 2,
            VK_COMPONENT_SWIZZLE_R = 3,
            VK_COMPONENT_SWIZZLE_G = 4,
            VK_COMPONENT_SWIZZLE_B = 5,
            VK_COMPONENT_SWIZZLE_A = 6,
            VK_COMPONENT_SWIZZLE_BEGIN_RANGE = VK_COMPONENT_SWIZZLE_IDENTITY,
            VK_COMPONENT_SWIZZLE_END_RANGE = VK_COMPONENT_SWIZZLE_A,
            VK_COMPONENT_SWIZZLE_RANGE_SIZE = (VK_COMPONENT_SWIZZLE_A - VK_COMPONENT_SWIZZLE_IDENTITY + 1),
            VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum VertexInputRate {
            VK_VERTEX_INPUT_RATE_VERTEX = 0,
            VK_VERTEX_INPUT_RATE_INSTANCE = 1,
            VK_VERTEX_INPUT_RATE_BEGIN_RANGE = VK_VERTEX_INPUT_RATE_VERTEX,
            VK_VERTEX_INPUT_RATE_END_RANGE = VK_VERTEX_INPUT_RATE_INSTANCE,
            VK_VERTEX_INPUT_RATE_RANGE_SIZE = (VK_VERTEX_INPUT_RATE_INSTANCE - VK_VERTEX_INPUT_RATE_VERTEX + 1),
            VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum PrimitiveTopology {
            VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
            VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
            VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
            VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
            VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
            VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
            VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
            VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
            VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
            VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
            VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
            VK_PRIMITIVE_TOPOLOGY_BEGIN_RANGE = VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
            VK_PRIMITIVE_TOPOLOGY_END_RANGE = VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,
            VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE = (VK_PRIMITIVE_TOPOLOGY_PATCH_LIST - VK_PRIMITIVE_TOPOLOGY_POINT_LIST + 1),
            VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF
        }
        public enum PolygonMode {
            VK_POLYGON_MODE_FILL = 0,
            VK_POLYGON_MODE_LINE = 1,
            VK_POLYGON_MODE_POINT = 2,
            VK_POLYGON_MODE_BEGIN_RANGE = VK_POLYGON_MODE_FILL,
            VK_POLYGON_MODE_END_RANGE = VK_POLYGON_MODE_POINT,
            VK_POLYGON_MODE_RANGE_SIZE = (VK_POLYGON_MODE_POINT - VK_POLYGON_MODE_FILL + 1),
            VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum FrontFace {
            VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
            VK_FRONT_FACE_CLOCKWISE = 1,
            VK_FRONT_FACE_BEGIN_RANGE = VK_FRONT_FACE_COUNTER_CLOCKWISE,
            VK_FRONT_FACE_END_RANGE = VK_FRONT_FACE_CLOCKWISE,
            VK_FRONT_FACE_RANGE_SIZE = (VK_FRONT_FACE_CLOCKWISE - VK_FRONT_FACE_COUNTER_CLOCKWISE + 1),
            VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum CompareOp {
            VK_COMPARE_OP_NEVER = 0,
            VK_COMPARE_OP_LESS = 1,
            VK_COMPARE_OP_EQUAL = 2,
            VK_COMPARE_OP_LESS_OR_EQUAL = 3,
            VK_COMPARE_OP_GREATER = 4,
            VK_COMPARE_OP_NOT_EQUAL = 5,
            VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
            VK_COMPARE_OP_ALWAYS = 7,
            VK_COMPARE_OP_BEGIN_RANGE = VK_COMPARE_OP_NEVER,
            VK_COMPARE_OP_END_RANGE = VK_COMPARE_OP_ALWAYS,
            VK_COMPARE_OP_RANGE_SIZE = (VK_COMPARE_OP_ALWAYS - VK_COMPARE_OP_NEVER + 1),
            VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF
        }
        public enum StencilOp {
            VK_STENCIL_OP_KEEP = 0,
            VK_STENCIL_OP_ZERO = 1,
            VK_STENCIL_OP_REPLACE = 2,
            VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
            VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
            VK_STENCIL_OP_INVERT = 5,
            VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
            VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
            VK_STENCIL_OP_BEGIN_RANGE = VK_STENCIL_OP_KEEP,
            VK_STENCIL_OP_END_RANGE = VK_STENCIL_OP_DECREMENT_AND_WRAP,
            VK_STENCIL_OP_RANGE_SIZE = (VK_STENCIL_OP_DECREMENT_AND_WRAP - VK_STENCIL_OP_KEEP + 1),
            VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF
        }
        public enum LogicOp {
            VK_LOGIC_OP_CLEAR = 0,
            VK_LOGIC_OP_AND = 1,
            VK_LOGIC_OP_AND_REVERSE = 2,
            VK_LOGIC_OP_COPY = 3,
            VK_LOGIC_OP_AND_INVERTED = 4,
            VK_LOGIC_OP_NO_OP = 5,
            VK_LOGIC_OP_XOR = 6,
            VK_LOGIC_OP_OR = 7,
            VK_LOGIC_OP_NOR = 8,
            VK_LOGIC_OP_EQUIVALENT = 9,
            VK_LOGIC_OP_INVERT = 10,
            VK_LOGIC_OP_OR_REVERSE = 11,
            VK_LOGIC_OP_COPY_INVERTED = 12,
            VK_LOGIC_OP_OR_INVERTED = 13,
            VK_LOGIC_OP_NAND = 14,
            VK_LOGIC_OP_SET = 15,
            VK_LOGIC_OP_BEGIN_RANGE = VK_LOGIC_OP_CLEAR,
            VK_LOGIC_OP_END_RANGE = VK_LOGIC_OP_SET,
            VK_LOGIC_OP_RANGE_SIZE = (VK_LOGIC_OP_SET - VK_LOGIC_OP_CLEAR + 1),
            VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF
        }
        public enum BlendFactor {
            VK_BLEND_FACTOR_ZERO = 0,
            VK_BLEND_FACTOR_ONE = 1,
            VK_BLEND_FACTOR_SRC_COLOR = 2,
            VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
            VK_BLEND_FACTOR_DST_COLOR = 4,
            VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
            VK_BLEND_FACTOR_SRC_ALPHA = 6,
            VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
            VK_BLEND_FACTOR_DST_ALPHA = 8,
            VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
            VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
            VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
            VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
            VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
            VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
            VK_BLEND_FACTOR_SRC1_COLOR = 15,
            VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
            VK_BLEND_FACTOR_SRC1_ALPHA = 17,
            VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
            VK_BLEND_FACTOR_BEGIN_RANGE = VK_BLEND_FACTOR_ZERO,
            VK_BLEND_FACTOR_END_RANGE = VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,
            VK_BLEND_FACTOR_RANGE_SIZE = (VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA - VK_BLEND_FACTOR_ZERO + 1),
            VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF
        }
        public enum BlendOp {
            VK_BLEND_OP_ADD = 0,
            VK_BLEND_OP_SUBTRACT = 1,
            VK_BLEND_OP_REVERSE_SUBTRACT = 2,
            VK_BLEND_OP_MIN = 3,
            VK_BLEND_OP_MAX = 4,
            VK_BLEND_OP_BEGIN_RANGE = VK_BLEND_OP_ADD,
            VK_BLEND_OP_END_RANGE = VK_BLEND_OP_MAX,
            VK_BLEND_OP_RANGE_SIZE = (VK_BLEND_OP_MAX - VK_BLEND_OP_ADD + 1),
            VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF
        }
        public enum DynamicState {
            VK_DYNAMIC_STATE_VIEWPORT = 0,
            VK_DYNAMIC_STATE_SCISSOR = 1,
            VK_DYNAMIC_STATE_LINE_WIDTH = 2,
            VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
            VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
            VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
            VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
            VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
            VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
            VK_DYNAMIC_STATE_BEGIN_RANGE = VK_DYNAMIC_STATE_VIEWPORT,
            VK_DYNAMIC_STATE_END_RANGE = VK_DYNAMIC_STATE_STENCIL_REFERENCE,
            VK_DYNAMIC_STATE_RANGE_SIZE = (VK_DYNAMIC_STATE_STENCIL_REFERENCE - VK_DYNAMIC_STATE_VIEWPORT + 1),
            VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum Filter {
            VK_FILTER_NEAREST = 0,
            VK_FILTER_LINEAR = 1,
            VK_FILTER_BEGIN_RANGE = VK_FILTER_NEAREST,
            VK_FILTER_END_RANGE = VK_FILTER_LINEAR,
            VK_FILTER_RANGE_SIZE = (VK_FILTER_LINEAR - VK_FILTER_NEAREST + 1),
            VK_FILTER_MAX_ENUM = 0x7FFFFFFF
        }
        public enum SamplerMipmapMode {
            VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
            VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
            VK_SAMPLER_MIPMAP_MODE_BEGIN_RANGE = VK_SAMPLER_MIPMAP_MODE_NEAREST,
            VK_SAMPLER_MIPMAP_MODE_END_RANGE = VK_SAMPLER_MIPMAP_MODE_LINEAR,
            VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE = (VK_SAMPLER_MIPMAP_MODE_LINEAR - VK_SAMPLER_MIPMAP_MODE_NEAREST + 1),
            VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum SamplerAddressMode {
            VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
            VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
            VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
            VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
            VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
            VK_SAMPLER_ADDRESS_MODE_BEGIN_RANGE = VK_SAMPLER_ADDRESS_MODE_REPEAT,
            VK_SAMPLER_ADDRESS_MODE_END_RANGE = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
            VK_SAMPLER_ADDRESS_MODE_RANGE_SIZE = (VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE - VK_SAMPLER_ADDRESS_MODE_REPEAT + 1),
            VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum BorderColor {
            VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
            VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
            VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
            VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
            VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
            VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
            VK_BORDER_COLOR_BEGIN_RANGE = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,
            VK_BORDER_COLOR_END_RANGE = VK_BORDER_COLOR_INT_OPAQUE_WHITE,
            VK_BORDER_COLOR_RANGE_SIZE = (VK_BORDER_COLOR_INT_OPAQUE_WHITE - VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK + 1),
            VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF
        }
        public enum DescriptorType {
            VK_DESCRIPTOR_TYPE_SAMPLER = 0,
            VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
            VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
            VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
            VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
            VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
            VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
            VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
            VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
            VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
            VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
            VK_DESCRIPTOR_TYPE_BEGIN_RANGE = VK_DESCRIPTOR_TYPE_SAMPLER,
            VK_DESCRIPTOR_TYPE_END_RANGE = VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,
            VK_DESCRIPTOR_TYPE_RANGE_SIZE = (VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT - VK_DESCRIPTOR_TYPE_SAMPLER + 1),
            VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum AttachmentLoadOp {
            VK_ATTACHMENT_LOAD_OP_LOAD = 0,
            VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
            VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
            VK_ATTACHMENT_LOAD_OP_BEGIN_RANGE = VK_ATTACHMENT_LOAD_OP_LOAD,
            VK_ATTACHMENT_LOAD_OP_END_RANGE = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
            VK_ATTACHMENT_LOAD_OP_RANGE_SIZE = (VK_ATTACHMENT_LOAD_OP_DONT_CARE - VK_ATTACHMENT_LOAD_OP_LOAD + 1),
            VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF
        }
        public enum AttachmentStoreOp {
            VK_ATTACHMENT_STORE_OP_STORE = 0,
            VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
            VK_ATTACHMENT_STORE_OP_BEGIN_RANGE = VK_ATTACHMENT_STORE_OP_STORE,
            VK_ATTACHMENT_STORE_OP_END_RANGE = VK_ATTACHMENT_STORE_OP_DONT_CARE,
            VK_ATTACHMENT_STORE_OP_RANGE_SIZE = (VK_ATTACHMENT_STORE_OP_DONT_CARE - VK_ATTACHMENT_STORE_OP_STORE + 1),
            VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF
        }
        public enum PipelineBindPoint {
            VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
            VK_PIPELINE_BIND_POINT_COMPUTE = 1,
            VK_PIPELINE_BIND_POINT_BEGIN_RANGE = VK_PIPELINE_BIND_POINT_GRAPHICS,
            VK_PIPELINE_BIND_POINT_END_RANGE = VK_PIPELINE_BIND_POINT_COMPUTE,
            VK_PIPELINE_BIND_POINT_RANGE_SIZE = (VK_PIPELINE_BIND_POINT_COMPUTE - VK_PIPELINE_BIND_POINT_GRAPHICS + 1),
            VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF
        }
        public enum CommandBufferLevel {
            VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
            VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
            VK_COMMAND_BUFFER_LEVEL_BEGIN_RANGE = VK_COMMAND_BUFFER_LEVEL_PRIMARY,
            VK_COMMAND_BUFFER_LEVEL_END_RANGE = VK_COMMAND_BUFFER_LEVEL_SECONDARY,
            VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE = (VK_COMMAND_BUFFER_LEVEL_SECONDARY - VK_COMMAND_BUFFER_LEVEL_PRIMARY + 1),
            VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF
        }
        public enum IndexType {
            VK_INDEX_TYPE_UINT16 = 0,
            VK_INDEX_TYPE_UINT32 = 1,
            VK_INDEX_TYPE_BEGIN_RANGE = VK_INDEX_TYPE_UINT16,
            VK_INDEX_TYPE_END_RANGE = VK_INDEX_TYPE_UINT32,
            VK_INDEX_TYPE_RANGE_SIZE = (VK_INDEX_TYPE_UINT32 - VK_INDEX_TYPE_UINT16 + 1),
            VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF
        }
        public enum SubpassContents {
            VK_SUBPASS_CONTENTS_INLINE = 0,
            VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
            VK_SUBPASS_CONTENTS_BEGIN_RANGE = VK_SUBPASS_CONTENTS_INLINE,
            VK_SUBPASS_CONTENTS_END_RANGE = VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS,
            VK_SUBPASS_CONTENTS_RANGE_SIZE = (VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS - VK_SUBPASS_CONTENTS_INLINE + 1),
            VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF
        }
        public enum FormatFeatureFlagBits {
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001,
            VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002,
            VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,
            VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,
            VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,
            VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,
            VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040,
            VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080,
            VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,
            VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,
            VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400,
            VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800,
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,
        }
        public enum ImageUsageFlagBits {
            VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,
            VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,
            VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004,
            VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008,
            VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,
            VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
            VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040,
            VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080,
        }
        public enum ImageCreateFlagBits {
            VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001,
            VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
            VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
            VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008,
            VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010,
        }
        public enum SampleCountFlagBits {
            VK_SAMPLE_COUNT_1_BIT = 0x00000001,
            VK_SAMPLE_COUNT_2_BIT = 0x00000002,
            VK_SAMPLE_COUNT_4_BIT = 0x00000004,
            VK_SAMPLE_COUNT_8_BIT = 0x00000008,
            VK_SAMPLE_COUNT_16_BIT = 0x00000010,
            VK_SAMPLE_COUNT_32_BIT = 0x00000020,
            VK_SAMPLE_COUNT_64_BIT = 0x00000040,
        }
        public enum QueueFlagBits {
            VK_QUEUE_GRAPHICS_BIT = 0x00000001,
            VK_QUEUE_COMPUTE_BIT = 0x00000002,
            VK_QUEUE_TRANSFER_BIT = 0x00000004,
            VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,
        }
        public enum MemoryPropertyFlagBits {
            VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001,
            VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002,
            VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004,
            VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008,
            VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,
        }
        public enum MemoryHeapFlagBits {
            VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001,
        }
        public enum PipelineStageFlagBits {
            VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,
            VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,
            VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,
            VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,
            VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
            VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
            VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,
            VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,
            VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
            VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
            VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
            VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,
            VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,
            VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,
            VK_PIPELINE_STAGE_HOST_BIT = 0x00004000,
            VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,
            VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,
        }
        public enum ImageAspectFlagBits {
            VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001,
            VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002,
            VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004,
            VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008,
        }
        public enum SparseImageFormatFlagBits {
            VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001,
            VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002,
            VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
        }
        public enum SparseMemoryBindFlagBits {
            VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001,
        }
        public enum FenceCreateFlagBits {
            VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001,
        }
        public enum QueryPipelineStatisticFlagBits {
            VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,
            VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,
            VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,
            VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,
            VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,
            VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020,
            VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040,
            VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,
            VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,
            VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
            VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,
        }
        public enum QueryResultFlagBits {
            VK_QUERY_RESULT_64_BIT = 0x00000001,
            VK_QUERY_RESULT_WAIT_BIT = 0x00000002,
            VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,
            VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008,
        }
        public enum BufferCreateFlagBits {
            VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001,
            VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
            VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
        }
        public enum BufferUsageFlagBits {
            VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,
            VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,
            VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
            VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
            VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,
            VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,
            VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,
            VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,
            VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,
        }
        public enum PipelineCreateFlagBits {
            VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001,
            VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002,
            VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004,
        }
        public enum ShaderStageFlagBits {
            VK_SHADER_STAGE_VERTEX_BIT = 0x00000001,
            VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
            VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
            VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
            VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
            VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020,
            VK_SHADER_STAGE_ALL_GRAPHICS = 0x1F,
            VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
        }
        public enum CullModeFlagBits {
            VK_CULL_MODE_NONE = 0,
            VK_CULL_MODE_FRONT_BIT = 0x00000001,
            VK_CULL_MODE_BACK_BIT = 0x00000002,
            VK_CULL_MODE_FRONT_AND_BACK = 0x3,
        }
        public enum ColorComponentFlagBits {
            VK_COLOR_COMPONENT_R_BIT = 0x00000001,
            VK_COLOR_COMPONENT_G_BIT = 0x00000002,
            VK_COLOR_COMPONENT_B_BIT = 0x00000004,
            VK_COLOR_COMPONENT_A_BIT = 0x00000008,
        }
        public enum DescriptorPoolCreateFlagBits {
            VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001,
        }
        public enum AttachmentDescriptionFlagBits {
            VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001,
        }
        public enum AccessFlagBits {
            VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,
            VK_ACCESS_INDEX_READ_BIT = 0x00000002,
            VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
            VK_ACCESS_UNIFORM_READ_BIT = 0x00000008,
            VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
            VK_ACCESS_SHADER_READ_BIT = 0x00000020,
            VK_ACCESS_SHADER_WRITE_BIT = 0x00000040,
            VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
            VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
            VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
            VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
            VK_ACCESS_TRANSFER_READ_BIT = 0x00000800,
            VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000,
            VK_ACCESS_HOST_READ_BIT = 0x00002000,
            VK_ACCESS_HOST_WRITE_BIT = 0x00004000,
            VK_ACCESS_MEMORY_READ_BIT = 0x00008000,
            VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000,
        }
        public enum DependencyFlagBits {
            VK_DEPENDENCY_BY_REGION_BIT = 0x00000001,
        }
        public enum CommandPoolCreateFlagBits {
            VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001,
            VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
        }
        public enum CommandPoolResetFlagBits {
            VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
        }
        public enum CommandBufferUsageFlagBits {
            VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001,
            VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
            VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004,
        }
        public enum QueryControlFlagBits {
            VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001,
        }
        public enum CommandBufferResetFlagBits {
            VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
        }
        public enum StencilFaceFlagBits {
            VK_STENCIL_FACE_FRONT_BIT = 0x00000001,
            VK_STENCIL_FACE_BACK_BIT = 0x00000002,
            VK_STENCIL_FRONT_AND_BACK = 0x3,
        }

        public delegate void* PFN_vkAllocationFunction(
            void* pUserData,
            uint size,
            uint alignment,
            SystemAllocationScope allocationScope);

        public delegate void* PFN_vkReallocationFunction(
            void* pUserData,
            void* pOriginal,
            uint size,
            uint alignment,
            SystemAllocationScope allocationScope);

        public delegate void PFN_vkFreeFunction(
            void* pUserData,
            void* pMemory);

        public delegate void PFN_vkInternalAllocationNotification(
            void* pUserData,
            uint size,
            InternalAllocationType allocationType,
            SystemAllocationScope allocationScope);

        public delegate void PFN_vkInternalFreeNotification(
            void* pUserData,
            uint size,
            InternalAllocationType allocationType,
            SystemAllocationScope allocationScope);

        public delegate void PFN_vkVoidFunction();

        public struct ApplicationInfo {
            public StructureType sType;
            public void* pNext;
            public char* pApplicationName;
            public uint applicationVersion;
            public char* pEngineName;
            public uint engineVersion;
            public uint apiVersion;
        }

        public struct InstanceCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkInstanceCreateFlags_flags;
            public ApplicationInfo* pApplicationInfo;
            public uint enabledLayerCount;
            public char** ppEnabledLayerNames;
            public uint enabledExtensionCount;
            public char** ppEnabledExtensionNames;
        }

        public struct AllocationCallbacks {
            public void* pUserData;
            [MarshalAs(UnmanagedType.FunctionPtr)]
            public PFN_vkAllocationFunction pfnAllocation;
            [MarshalAs(UnmanagedType.FunctionPtr)]
            public PFN_vkReallocationFunction pfnReallocation;
            [MarshalAs(UnmanagedType.FunctionPtr)]
            public PFN_vkFreeFunction pfnFree;
            [MarshalAs(UnmanagedType.FunctionPtr)]
            public PFN_vkInternalAllocationNotification pfnInternalAllocation;
            [MarshalAs(UnmanagedType.FunctionPtr)]
            public PFN_vkInternalFreeNotification pfnInternalFree;
        }

        public struct PhysicalDeviceFeatures {
            public uint VkBool32_robustBufferAccess;
            public uint VkBool32_fullDrawIndexUint32;
            public uint VkBool32_imageCubeArray;
            public uint VkBool32_independentBlend;
            public uint VkBool32_geometryShader;
            public uint VkBool32_tessellationShader;
            public uint VkBool32_sampleRateShading;
            public uint VkBool32_dualSrcBlend;
            public uint VkBool32_logicOp;
            public uint VkBool32_multiDrawIndirect;
            public uint VkBool32_drawIndirectFirstInstance;
            public uint VkBool32_depthClamp;
            public uint VkBool32_depthBiasClamp;
            public uint VkBool32_fillModeNonSolid;
            public uint VkBool32_depthBounds;
            public uint VkBool32_wideLines;
            public uint VkBool32_largePoints;
            public uint VkBool32_alphaToOne;
            public uint VkBool32_multiViewport;
            public uint VkBool32_samplerAnisotropy;
            public uint VkBool32_textureCompressionETC2;
            public uint VkBool32_textureCompressionASTC_LDR;
            public uint VkBool32_textureCompressionBC;
            public uint VkBool32_occlusionQueryPrecise;
            public uint VkBool32_pipelineStatisticsQuery;
            public uint VkBool32_vertexPipelineStoresAndAtomics;
            public uint VkBool32_fragmentStoresAndAtomics;
            public uint VkBool32_shaderTessellationAndGeometryPointSize;
            public uint VkBool32_shaderImageGatherExtended;
            public uint VkBool32_shaderStorageImageExtendedFormats;
            public uint VkBool32_shaderStorageImageMultisample;
            public uint VkBool32_shaderStorageImageReadWithoutFormat;
            public uint VkBool32_shaderStorageImageWriteWithoutFormat;
            public uint VkBool32_shaderUniformBufferArrayDynamicIndexing;
            public uint VkBool32_shaderSampledImageArrayDynamicIndexing;
            public uint VkBool32_shaderStorageBufferArrayDynamicIndexing;
            public uint VkBool32_shaderStorageImageArrayDynamicIndexing;
            public uint VkBool32_shaderClipDistance;
            public uint VkBool32_shaderCullDistance;
            public uint VkBool32_shaderFloat64;
            public uint VkBool32_shaderInt64;
            public uint VkBool32_shaderInt16;
            public uint VkBool32_shaderResourceResidency;
            public uint VkBool32_shaderResourceMinLod;
            public uint VkBool32_sparseBinding;
            public uint VkBool32_sparseResidencyBuffer;
            public uint VkBool32_sparseResidencyImage2D;
            public uint VkBool32_sparseResidencyImage3D;
            public uint VkBool32_sparseResidency2Samples;
            public uint VkBool32_sparseResidency4Samples;
            public uint VkBool32_sparseResidency8Samples;
            public uint VkBool32_sparseResidency16Samples;
            public uint VkBool32_sparseResidencyAliased;
            public uint VkBool32_variableMultisampleRate;
            public uint VkBool32_inheritedQueries;
        }

        public struct FormatProperties {
            public uint VkFormatFeatureFlags_linearTilingFeatures;
            public uint VkFormatFeatureFlags_optimalTilingFeatures;
            public uint VkFormatFeatureFlags_bufferFeatures;
        }

        public struct Extent3D {
            public uint width;
            public uint height;
            public uint depth;
        }

        public struct ImageFormatProperties {
            public Extent3D maxExtent;
            public uint maxMipLevels;
            public uint maxArrayLayers;
            public uint VkSampleCountFlags_sampleCounts;
            public ulong VkDeviceSize_maxResourceSize;
        }

        public struct PhysicalDeviceLimits {
            public uint maxImageDimension1D;
            public uint maxImageDimension2D;
            public uint maxImageDimension3D;
            public uint maxImageDimensionCube;
            public uint maxImageArrayLayers;
            public uint maxTexelBufferElements;
            public uint maxUniformBufferRange;
            public uint maxStorageBufferRange;
            public uint maxPushConstantsSize;
            public uint maxMemoryAllocationCount;
            public uint maxSamplerAllocationCount;
            public ulong VkDeviceSize_bufferImageGranularity;
            public ulong VkDeviceSize_sparseAddressSpaceSize;
            public uint maxBoundDescriptorSets;
            public uint maxPerStageDescriptorSamplers;
            public uint maxPerStageDescriptorUniformBuffers;
            public uint maxPerStageDescriptorStorageBuffers;
            public uint maxPerStageDescriptorSampledImages;
            public uint maxPerStageDescriptorStorageImages;
            public uint maxPerStageDescriptorInputAttachments;
            public uint maxPerStageResources;
            public uint maxDescriptorSetSamplers;
            public uint maxDescriptorSetUniformBuffers;
            public uint maxDescriptorSetUniformBuffersDynamic;
            public uint maxDescriptorSetStorageBuffers;
            public uint maxDescriptorSetStorageBuffersDynamic;
            public uint maxDescriptorSetSampledImages;
            public uint maxDescriptorSetStorageImages;
            public uint maxDescriptorSetInputAttachments;
            public uint maxVertexInputAttributes;
            public uint maxVertexInputBindings;
            public uint maxVertexInputAttributeOffset;
            public uint maxVertexInputBindingStride;
            public uint maxVertexOutputComponents;
            public uint maxTessellationGenerationLevel;
            public uint maxTessellationPatchSize;
            public uint maxTessellationControlPerVertexInputComponents;
            public uint maxTessellationControlPerVertexOutputComponents;
            public uint maxTessellationControlPerPatchOutputComponents;
            public uint maxTessellationControlTotalOutputComponents;
            public uint maxTessellationEvaluationInputComponents;
            public uint maxTessellationEvaluationOutputComponents;
            public uint maxGeometryShaderInvocations;
            public uint maxGeometryInputComponents;
            public uint maxGeometryOutputComponents;
            public uint maxGeometryOutputVertices;
            public uint maxGeometryTotalOutputComponents;
            public uint maxFragmentInputComponents;
            public uint maxFragmentOutputAttachments;
            public uint maxFragmentDualSrcAttachments;
            public uint maxFragmentCombinedOutputResources;
            public uint maxComputeSharedMemorySize;
            public fixed uint maxComputeWorkGroupCount[3];
            public uint maxComputeWorkGroupInvocations;
            public fixed uint maxComputeWorkGroupSize[3];
            public uint subPixelPrecisionBits;
            public uint subTexelPrecisionBits;
            public uint mipmapPrecisionBits;
            public uint maxDrawIndexedIndexValue;
            public uint maxDrawIndirectCount;
            public float maxSamplerLodBias;
            public float maxSamplerAnisotropy;
            public uint maxViewports;
            public fixed uint maxViewportDimensions[2];
            public fixed float viewportBoundsRange[2];
            public uint viewportSubPixelBits;
            public uint minMemoryMapAlignment;
            public ulong VkDeviceSize_minTexelBufferOffsetAlignment;
            public ulong VkDeviceSize_minUniformBufferOffsetAlignment;
            public ulong VkDeviceSize_minStorageBufferOffsetAlignment;
            public int minTexelOffsext;
            public uint maxTexelOffset;
            public int minTexelGatherOffset;
            public uint maxTexelGatherOffset;
            public float minInterpolationOffset;
            public float maxInterpolationOffset;
            public uint subPixelInterpolationOffsetBits;
            public uint maxFramebufferWidth;
            public uint maxFramebufferHeight;
            public uint maxFramebufferLayers;
            public uint VkSampleCountFlags_framebufferColorSampleCounts;
            public uint VkSampleCountFlags_framebufferDepthSampleCounts;
            public uint VkSampleCountFlags_framebufferStencilSampleCounts;
            public uint VkSampleCountFlags_framebufferNoAttachmentsSampleCounts;
            public uint maxColorAttachments;
            public uint VkSampleCountFlags_sampledImageColorSampleCounts;
            public uint VkSampleCountFlags_sampledImageIntegerSampleCounts;
            public uint VkSampleCountFlags_sampledImageDepthSampleCounts;
            public uint VkSampleCountFlags_sampledImageStencilSampleCounts;
            public uint VkSampleCountFlags_storageImageSampleCounts;
            public uint maxSampleMaskWords;
            public uint VkBool32_timestampComputeAndGraphics;
            public float timestampPeriod;
            public uint maxClipDistances;
            public uint maxCullDistances;
            public uint maxCombinedClipAndCullDistances;
            public uint discreteQueuePriorities;
            public fixed float pointSizeRange[2];
            public fixed float lineWidthRange[2];
            public float pointSizeGranularity;
            public float lineWidthGranularity;
            public uint VkBool32_strictLines;
            public uint VkBool32_standardSampleLocations;
            public ulong VkDeviceSize_optimalBufferCopyOffsetAlignment;
            public ulong VkDeviceSize_optimalBufferCopyRowPitchAlignment;
            public ulong VkDeviceSize_nonCoherentAtomSize;
        }

        public struct PhysicalDeviceSparseProperties {
            public uint VkBool32_residencyStandard2DBlockShape;
            public uint VkBool32_residencyStandard2DMultisampleBlockShape;
            public uint VkBool32_residencyStandard3DBlockShape;
            public uint VkBool32_residencyAlignedMipSize;
            public uint VkBool32_residencyNonResidentStrict;
        }

        public struct PhysicalDeviceProperties {
            public uint apiVersion;
            public uint driverVersion;
            public uint vendorID;
            public uint deviceID;
            public PhysicalDeviceType deviceType;
            public fixed char deviceName[MAX_PHYSICAL_DEVICE_NAME_SIZE];
            public fixed byte pipelineCacheUUID[UUID_SIZE];
            public PhysicalDeviceLimits limits;
            public PhysicalDeviceSparseProperties sparseProperties;
        }

        public struct QueueFamilyProperties {
            public uint VkQueueFlags_queueFlags;
            public uint queueCount;
            public uint timestampValidBits;
            public Extent3D minImageTransferGranularity;
        }

        public struct MemoryType {
            public uint VkMemoryPropertyFlags_propertyFlags;
            public uint heapIndex;
        }

        public struct MemoryHeap {
            public ulong VkDeviceSize_size;
            public uint VkMemoryHeapFlags_flags;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct PhysicalDeviceMemoryProperties {
            public uint memoryTypeCount;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = MAX_MEMORY_TYPES)]
            public MemoryType[] memoryTypes;
            public uint memoryHeapCount;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = MAX_MEMORY_HEAPS)]
            public MemoryHeap[] memoryHeaps;
        }

        public struct DeviceQueueCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkDeviceQueueCreateFlags_flags;
            public uint queueFamilyIndex;
            public uint queueCount;
            public float* pQueuePriorities;
        }

        public struct DeviceCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkDeviceCreateFlags_flags;
            public uint queueCreateInfoCount;
            public DeviceQueueCreateInfo* pQueueCreateInfos;
            public uint enabledLayerCount;
            public char** ppEnabledLayerNames;
            public uint enabledExtensionCount;
            public char** ppEnabledExtensionNames;
            public PhysicalDeviceFeatures* pEnabledFeatures;
        }

        public struct ExtensionProperties {
            public fixed char extensionName[MAX_EXTENSION_NAME_SIZE];
            public uint specVersion;
        }

        public struct LayerProperties {
            public fixed char layerName[MAX_EXTENSION_NAME_SIZE];
            public uint specVersion;
            public uint implementationVersion;
            public fixed char description[MAX_DESCRIPTION_SIZE];
        }

        public struct SubmitInfo {
            public StructureType sType;
            public void* pNext;
            public uint waitSemaphoreCount;
            public Semaphore* pWaitSemaphores;
            public uint* VkPipelineStageFlags_pWaitDstStageMask;
            public uint commandBufferCount;
            public CommandBuffer* pCommandBuffers;
            public uint signalSemaphoreCount;
            public Semaphore* pSignalSemaphores;
        }

        public struct MemoryAllocateInfo {
            public StructureType sType;
            public void* pNext;
            public ulong VkDeviceSize_allocationSize;
            public uint memoryTypeIndex;
        }

        public struct MappedMemoryRange {
            public StructureType sType;
            public void* pNext;
            public DeviceMemory memory;
            public ulong VkDeviceSize_offset;
            public ulong VkDeviceSize_size;
        }

        public struct MemoryRequirements {
            public ulong VkDeviceSize_size;
            public ulong VkDeviceSize_alignment;
            public uint memoryTypeBits;
        }

        public struct SparseImageFormatProperties {
            public uint VkImageAspectFlags_aspectMask;
            public Extent3D imageGranularity;
            public uint SparseImageFormatFlags_flags;
        }

        public struct SparseImageMemoryRequirements {
            public SparseImageFormatProperties formatProperties;
            public uint imageMipTailFirstLod;
            public ulong VkDeviceSize_imageMipTailSize;
            public ulong VkDeviceSize_imageMipTailOffset;
            public ulong VkDeviceSize_imageMipTailStride;
        }

        public struct SparseMemoryBind {
            public ulong VkDeviceSize_resourceOffset;
            public ulong VkDeviceSize_size;
            public DeviceMemory memory;
            public ulong VkDeviceSize_memoryOffset;
            public uint VkSparseMemoryBindFlags_flags;
        }

        public struct SparseBufferMemoryBindInfo {
            public Buffer buffer;
            public uint bindCount;
            public SparseMemoryBind* pBinds;
        }

        public struct SparseImageOpaqueMemoryBindInfo {
            public Image image;
            public uint bindCount;
            public SparseMemoryBind* pBinds;
        }

        public struct ImageSubresource {
            public uint VkImageAspectFlags_aspectMask;
            public uint mipLevel;
            public uint arrayLayer;
        }

        public struct Offset3D {
            public int x;
            public int y;
            public int z;
        }

        public struct SparseImageMemoryBind {
            public ImageSubresource subresource;
            public Offset3D offset;
            public Extent3D extent;
            public DeviceMemory memory;
            public ulong VkDeviceSize_memoryOffset;
            public uint VkSparseMemoryBindFlags_flags;
        }

        public struct SparseImageMemoryBindInfo {
            public Image image;
            public uint bindCount;
            public SparseImageMemoryBind* pBinds;
        }

        public struct BindSparseInfo {
            public StructureType sType;
            public void* pNext;
            public uint waitSemaphoreCount;
            public Semaphore* pWaitSemaphores;
            public uint bufferBindCount;
            public SparseBufferMemoryBindInfo* pBufferBinds;
            public uint imageOpaqueBindCount;
            public SparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
            public uint imageBindCount;
            public SparseImageMemoryBindInfo* pImageBinds;
            public uint signalSemaphoreCount;
            public Semaphore* pSignalSemaphores;
        }

        public struct FenceCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkFenceCreateFlags_flags;
        }

        public struct SemaphoreCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkSemaphoreCreateFlags_flags;
        }

        public struct EventCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkEventCreateFlags_flags;
        }

        public struct QueryPoolCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkQueryPoolCreateFlags_flags;
            public QueryType queryType;
            public uint queryCount;
            public uint VkQueryPipelineStatisticFlags_pipelineStatistics;
        }

        public struct BufferCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkBufferCreateFlags_flags;
            public ulong VkDeviceSize_size;
            public uint VkBufferUsageFlags_usage;
            public SharingMode sharingMode;
            public uint queueFamilyIndexCount;
            public uint* pQueueFamilyIndices;
        }

        public struct BufferViewCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkBufferViewCreateFlags_flags;
            public Buffer buffer;
            public Format format;
            public ulong VkDeviceSize_offset;
            public ulong VkDeviceSize_range;
        }

        public struct ImageCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkImageCreateFlags_flags;
            public ImageType imageType;
            public Format format;
            public Extent3D extent;
            public uint mipLevels;
            public uint arrayLayers;
            public SampleCountFlagBits samples;
            public ImageTiling tiling;
            public uint VkImageUsageFlags_usage;
            public SharingMode sharingMode;
            public uint queueFamilyIndexCount;
            public uint* pQueueFamilyIndices;
            public ImageLayout initialLayout;
        }

        public struct SubresourceLayout {
            public ulong VkDeviceSize_offset;
            public ulong VkDeviceSize_size;
            public ulong VkDeviceSize_rowPitch;
            public ulong VkDeviceSize_arrayPitch;
            public ulong VkDeviceSize_depthPitch;
        }

        public struct ComponentMapping {
            public ComponentSwizzle r;
            public ComponentSwizzle g;
            public ComponentSwizzle b;
            public ComponentSwizzle a;
        }
        public struct ImageSubresourceRange {
            public uint VkImageAspectFlags_aspectMask;
            public uint baseMipLevel;
            public uint levelCount;
            public uint baseArrayLayer;
            public uint layerCount;
        }

        public struct ImageViewCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkImageViewCreateFlags_flags;
            public Image image;
            public ImageViewType viewType;
            public Format format;
            public ComponentMapping components;
            public ImageSubresourceRange subresourceRange;
        }

        public struct ShaderModuleCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkShaderModuleCreateFlags_flags;
            public uint codeSize;
            public uint* pCode;
        }

        public struct PipelineCacheCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineCacheCreateFlags_flags;
            public uint initialDataSize;
            public void* pInitialData;
        }

        public struct SpecializationMapEntry {
            public uint constantID;
            public uint offset;
            public uint size;
        }

        public struct SpecializationInfo {
            public uint mapEntryCount;
            public SpecializationMapEntry* pMapEntries;
            public uint dataSize;
            public void* pData;
        }

        public struct PipelineShaderStageCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineShaderStageCreateFlags_flags;
            public ShaderStageFlagBits stage;
            public ShaderModule module;
            public char* pName;
            public SpecializationInfo* pSpecializationInfo;
        }

        public struct VertexInputBindingDescription {
            public uint binding;
            public uint stride;
            public VertexInputRate inputRate;
        }

        public struct VertexInputAttributeDescription {
            public uint location;
            public uint binding;
            public Format format;
            public uint offset;
        }

        public struct PipelineVertexInputStateCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineVertexInputStateCreateFlags_flags;
            public uint vertexBindingDescriptionCount;
            public VertexInputBindingDescription* pVertexBindingDescriptions;
            public uint vertexAttributeDescriptionCount;
            public VertexInputAttributeDescription* pVertexAttributeDescriptions;
        }

        public struct PipelineInputAssemblyStateCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineInputAssemblyStateCreateFlags_flags;
            public PrimitiveTopology topology;
            public uint VkBool32_primitiveRestartEnable;
        }

        public struct PipelineTessellationStateCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineTessellationStateCreateFlags_flags;
            public uint patchControlPoints;
        }

        public struct Viewport {
            public float x;
            public float y;
            public float width;
            public float height;
            public float minDepth;
            public float maxDepth;
        }

        public struct Offset2D {
            public int x;
            public int y;
        }

        public struct Extent2D {
            public uint width;
            public uint height;
        }

        public struct Rect2D {
            public Offset2D offset;
            public Extent2D extent;
        }

        public struct PipelineViewportStateCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineViewportStateCreateFlags_flags;
            public uint viewportCount;
            public Viewport* pViewports;
            public uint scissorCount;
            public Rect2D* pScissors;
        }

        public struct PipelineRasterizationStateCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineRasterizationStateCreateFlags_flags;
            public uint VkBool32_depthClampEnable;
            public uint VkBool32_rasterizerDiscardEnable;
            public PolygonMode polygonMode;
            public uint VkCullModeFlags_cullMode;
            public FrontFace frontFace;
            public uint VkBool32_depthBiasEnable;
            public float depthBiasConstantFactor;
            public float depthBiasClamp;
            public float depthBiasSlopeFactor;
            public float lineWidth;
        }

        public struct PipelineMultisampleStateCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineMultisampleStateCreateFlags_flags;
            public SampleCountFlagBits rasterizationSamples;
            public uint VkBool32_sampleShadingEnable;
            public float minSampleShading;
            public uint* VkSampleMask_pSampleMask;
            public uint VkBool32_alphaToCoverageEnable;
            public uint VkBool32_alphaToOneEnable;
        }

        public struct StencilOpState {
            public StencilOp failOp;
            public StencilOp passOp;
            public StencilOp depthFailOp;
            public CompareOp compareOp;
            public uint compareMask;
            public uint writeMask;
            public uint reference;
        }

        public struct PipelineDepthStencilStateCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineDepthStencilStateCreateFlags_flags;
            public uint VkBool32_depthTestEnable;
            public uint VkBool32_depthWriteEnable;
            public CompareOp depthCompareOp;
            public uint VkBool32_depthBoundsTestEnable;
            public uint VkBool32_stencilTestEnable;
            public StencilOpState front;
            public StencilOpState back;
            public float minDepthBounds;
            public float maxDepthBounds;
        }

        public struct PipelineColorBlendAttachmentState {
            public uint VkBool32_blendEnable;
            public BlendFactor srcColorBlendFactor;
            public BlendFactor dstColorBlendFactor;
            public BlendOp colorBlendOp;
            public BlendFactor srcAlphaBlendFactor;
            public BlendFactor dstAlphaBlendFactor;
            public BlendOp alphaBlendOp;
            public uint VkColorComponentFlags_colorWriteMask;
        }

        public struct PipelineColorBlendStateCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineColorBlendStateCreateFlags_flags;
            public uint VkBool32_logicOpEnable;
            public LogicOp logicOp;
            public uint attachmentCount;
            public PipelineColorBlendAttachmentState* pAttachments;
            public fixed float blendConstants[4];
        }

        public struct PipelineDynamicStateCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineDynamicStateCreateFlags_flags;
            public uint dynamicStateCount;
            public DynamicState* pDynamicStates;
        }

        public struct GraphicsPipelineCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineCreateFlags_flags;
            public uint stageCount;
            public PipelineShaderStageCreateInfo* pStages;
            public PipelineVertexInputStateCreateInfo* pVertexInputState;
            public PipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
            public PipelineTessellationStateCreateInfo* pTessellationState;
            public PipelineViewportStateCreateInfo* pViewportState;
            public PipelineRasterizationStateCreateInfo* pRasterizationState;
            public PipelineMultisampleStateCreateInfo* pMultisampleState;
            public PipelineDepthStencilStateCreateInfo* pDepthStencilState;
            public PipelineColorBlendStateCreateInfo* pColorBlendState;
            public PipelineDynamicStateCreateInfo* pDynamicState;
            public PipelineLayout layout;
            public RenderPass renderPass;
            public uint subpass;
            public Pipeline basePipelineHandle;
            public int basePipelineIndex;
        }

        public struct ComputePipelineCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineCreateFlags_flags;
            public PipelineShaderStageCreateInfo stage;
            public PipelineLayout layout;
            public Pipeline basePipelineHandle;
            public int basePipelineIndex;
        }

        public struct PushConstantRange {
            public uint VkShaderStageFlags_stageFlags;
            public uint offset;
            public uint size;
        }

        public struct PipelineLayoutCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkPipelineLayoutCreateFlags_flags;
            public uint setLayoutCount;
            public DescriptorSetLayout* pSetLayouts;
            public uint pushConstantRangeCount;
            public PushConstantRange* pPushConstantRanges;
        }

        public struct SamplerCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkSamplerCreateFlags_flags;
            public Filter magFilter;
            public Filter minFilter;
            public SamplerMipmapMode mipmapMode;
            public SamplerAddressMode addressModeU;
            public SamplerAddressMode addressModeV;
            public SamplerAddressMode addressModeW;
            public float mipLodBias;
            public uint VkBool32_anisotropyEnable;
            public float maxAnisotropy;
            public uint VkBool32_compareEnable;
            public CompareOp compareOp;
            public float minLod;
            public float maxLod;
            public BorderColor borderColor;
            public uint VkBool32_unnormalizedCoordinates;
        }

        public struct DescriptorSetLayoutBinding {
            public uint binding;
            public DescriptorType descriptorType;
            public uint descriptorCount;
            public uint VkShaderStageFlags_stageFlags;
            public Sampler* pImmutableSamplers;
        }

        public struct DescriptorSetLayoutCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkDescriptorSetLayoutCreateFlags_flags;
            public uint bindingCount;
            public DescriptorSetLayoutBinding* pBindings;
        }

        public struct DescriptorPoolSize {
            public DescriptorType type;
            public uint descriptorCount;
        }

        public struct DescriptorPoolCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkDescriptorPoolCreateFlags_flags;
            public uint maxSets;
            public uint poolSizeCount;
            public DescriptorPoolSize* pPoolSizes;
        }

        public struct DescriptorSetAllocateInfo {
            public StructureType sType;
            public void* pNext;
            public DescriptorPool descriptorPool;
            public uint descriptorSetCount;
            public DescriptorSetLayout* pSetLayouts;
        }

        public struct DescriptorImageInfo {
            public Sampler sampler;
            public ImageView imageView;
            public ImageLayout imageLayout;
        }

        public struct DescriptorBufferInfo {
            public Buffer buffer;
            public ulong VkDeviceSize_offset;
            public ulong VkDeviceSize_range;
        }

        public struct WriteDescriptorSet {
            public StructureType sType;
            public void* pNext;
            public DescriptorSet dstSet;
            public uint dstBinding;
            public uint dstArrayElement;
            public uint descriptorCount;
            public DescriptorType descriptorType;
            public DescriptorImageInfo* pImageInfo;
            public DescriptorBufferInfo* pBufferInfo;
            public BufferView* pTexelBufferView;
        }

        public struct CopyDescriptorSet {
            public StructureType sType;
            public void* pNext;
            public DescriptorSet srcSet;
            public uint srcBinding;
            public uint srcArrayElement;
            public DescriptorSet dstSet;
            public uint dstBinding;
            public uint dstArrayElement;
            public uint descriptorCount;
        }

        public struct FramebufferCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkFramebufferCreateFlags_flags;
            public RenderPass renderPass;
            public uint attachmentCount;
            public ImageView* pAttachments;
            public uint width;
            public uint height;
            public uint layers;
        }

        public struct AttachmentDescription {
            public uint VkAttachmentDescriptionFlags_flags;
            public Format format;
            public SampleCountFlagBits samples;
            public AttachmentLoadOp loadOp;
            public AttachmentStoreOp storeOp;
            public AttachmentLoadOp stencilLoadOp;
            public AttachmentStoreOp stencilStoreOp;
            public ImageLayout initialLayout;
            public ImageLayout finalLayout;
        }

        public struct AttachmentReference {
            public uint attachment;
            public ImageLayout layout;
        }

        public struct SubpassDescription {
            public uint VkSubpassDescriptionFlags_flags;
            public PipelineBindPoint pipelineBindPoint;
            public uint inputAttachmentCount;
            public AttachmentReference* pInputAttachments;
            public uint colorAttachmentCount;
            public AttachmentReference* pColorAttachments;
            public AttachmentReference* pResolveAttachments;
            public AttachmentReference* pDepthStencilAttachment;
            public uint preserveAttachmentCount;
            public uint* pPreserveAttachments;
        }

        public struct SubpassDependency {
            public uint srcSubpass;
            public uint dstSubpass;
            public uint VkPipelineStageFlags_srcStageMask;
            public uint VkPipelineStageFlags_dstStageMask;
            public uint VkAccessFlags_srcAccessMask;
            public uint VkAccessFlags_dstAccessMask;
            public uint VkDependencyFlags_dependencyFlags;
        }

        public struct RenderPassCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkRenderPassCreateFlags_flags;
            public uint attachmentCount;
            public AttachmentDescription* pAttachments;
            public uint subpassCount;
            public SubpassDescription* pSubpasses;
            public uint dependencyCount;
            public SubpassDependency* pDependencies;
        }

        public struct CommandPoolCreateInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkCommandPoolCreateFlags_flags;
            public uint queueFamilyIndex;
        }

        public struct CommandBufferAllocateInfo {
            public StructureType sType;
            public void* pNext;
            public CommandPool commandPool;
            public CommandBufferLevel level;
            public uint commandBufferCount;
        }

        public struct CommandBufferInheritanceInfo {
            public StructureType sType;
            public void* pNext;
            public RenderPass renderPass;
            public uint subpass;
            public Framebuffer framebuffer;
            public uint VkBool32_occlusionQueryEnable;
            public uint VkQueryControlFlags_queryFlags;
            public uint VkQueryPipelineStatisticFlags_pipelineStatistics;
        }

        public struct CommandBufferBeginInfo {
            public StructureType sType;
            public void* pNext;
            public uint VkCommandBufferUsageFlags_flags;
            public CommandBufferInheritanceInfo* pInheritanceInfo;
        }

        public struct BufferCopy {
            public ulong VkDeviceSize_srcOffset;
            public ulong VkDeviceSize_dstOffset;
            public ulong VkDeviceSize_size;
        }

        public struct ImageSubresourceLayers {
            public uint VkImageAspectFlags_aspectMask;
            public uint mipLevel;
            public uint baseArrayLayer;
            public uint layerCount;
        }

        public struct ImageCopy {
            public ImageSubresourceLayers srcSubresource;
            public Offset3D srcOffset;
            public ImageSubresourceLayers dstSubresource;
            public Offset3D dstOffset;
            public Extent3D extent;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct ImageBlit {
            public ImageSubresourceLayers srcSubresource;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
            public Offset3D[] srcOffsets;
            public ImageSubresourceLayers dstSubresource;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
            public Offset3D[] dstOffsets;
        }

        public struct BufferImageCopy {
            public ulong VkDeviceSize_bufferOffset;
            public uint bufferRowLength;
            public uint bufferImageHeight;
            public ImageSubresourceLayers imageSubresource;
            public Offset3D imageOffset;
            public Extent3D imageExtent;
        }

        [StructLayout(LayoutKind.Explicit)]
        public struct ClearColorValue {
            [FieldOffset(0)]
            public fixed float float32[4];
            [FieldOffset(0)]
            public fixed int int32[4];
            [FieldOffset(0)]
            public fixed uint uint32[4];
        }

        public struct ClearDepthStencilValue {
            public float depth;
            public uint stencil;
        }

        [StructLayout(LayoutKind.Explicit)]
        public struct ClearValue {
            [FieldOffset(0)]
            public ClearColorValue color;
            [FieldOffset(0)]
            public ClearDepthStencilValue depthStencil;
        }

        public struct ClearAttachment {
            public uint VkImageAspectFlags_aspectMask;
            public uint colorAttachment;
            public ClearValue clearValue;
        }

        public struct ClearRect {
            public Rect2D rect;
            public uint baseArrayLayer;
            public uint layerCount;
        }

        public struct ImageResolve {
            public ImageSubresourceLayers srcSubresource;
            public Offset3D srcOffset;
            public ImageSubresourceLayers dstSubresource;
            public Offset3D dstOffset;
            public Extent3D extent;
        }

        public struct MemoryBarrier {
            public StructureType sType;
            public void* pNext;
            public uint VkAccessFlags_srcAccessMask;
            public uint VkAccessFlags_dstAccessMask;
        }

        public struct BufferMemoryBarrier {
            public StructureType sType;
            public void* pNext;
            public uint VkAccessFlags_srcAccessMask;
            public uint VkAccessFlags_dstAccessMask;
            public uint srcQueueFamilyIndex;
            public uint dstQueueFamilyIndex;
            public Buffer buffer;
            public ulong VkDeviceSize_offset;
            public ulong VkDeviceSize_size;
        }

        public struct ImageMemoryBarrier {
            public StructureType sType;
            public void* pNext;
            public uint VkAccessFlags_srcAccessMask;
            public uint VkAccessFlags_dstAccessMask;
            public ImageLayout oldLayout;
            public ImageLayout newLayout;
            public uint srcQueueFamilyIndex;
            public uint dstQueueFamilyIndex;
            public Image image;
            public ImageSubresourceRange subresourceRange;
        }

        public struct RenderPassBeginInfo {
            public StructureType sType;
            public void* pNext;
            public RenderPass renderPass;
            public Framebuffer framebuffer;
            public Rect2D renderArea;
            public uint clearValueCount;
            public ClearValue* pClearValues;
        }

        public struct DispatchIndirectCommand {
            public uint x;
            public uint y;
            public uint z;
        }

        public struct DrawIndexedIndirectCommand {
            public uint indexCount;
            public uint instanceCount;
            public uint firstIndex;
            public int vertexOffset;
            public uint firstInstance;
        }

        public struct DrawIndirectCommand {
            public uint vertexCount;
            public uint instanceCount;
            public uint firstVertex;
            public uint firstInstance;
        }

        /*
        public delegate Result PFN_vkCreateInstance(InstanceCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Instance* pInstance);
        public delegate void PFN_vkDestroyInstance(Instance instance, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkEnumeratePhysicalDevices(Instance instance, uint* pPhysicalDeviceCount, PhysicalDevice* pPhysicalDevices);
        public delegate void PFN_vkGetPhysicalDeviceFeatures(PhysicalDevice physicalDevice, PhysicalDeviceFeatures* pFeatures);
        public delegate void PFN_vkGetPhysicalDeviceFormatProperties(PhysicalDevice physicalDevice, Format format, FormatProperties* pFormatProperties);
        public delegate Result PFN_vkGetPhysicalDeviceImageFormatProperties(PhysicalDevice physicalDevice, Format format, ImageType type, ImageTiling tiling, uint VkImageUsageFlags_usage, uint VkImageCreateFlags_flags, ImageFormatProperties* pImageFormatProperties);
        public delegate void PFN_vkGetPhysicalDeviceProperties(PhysicalDevice physicalDevice, PhysicalDeviceProperties* pProperties);
        public delegate void PFN_vkGetPhysicalDeviceQueueFamilyProperties(PhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, QueueFamilyProperties* pQueueFamilyProperties);
        public delegate void PFN_vkGetPhysicalDeviceMemoryProperties(PhysicalDevice physicalDevice, PhysicalDeviceMemoryProperties* pMemoryProperties);
        public delegate PFN_vkVoidFunction PFN_vkGetInstanceProcAddr(Instance instance, char* pName);
        public delegate PFN_vkVoidFunction PFN_vkGetDeviceProcAddr(Device device, char* pName);
        public delegate Result PFN_vkCreateDevice(PhysicalDevice physicalDevice, DeviceCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Device* pDevice);
        public delegate void PFN_vkDestroyDevice(Device device, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkEnumerateInstanceExtensionProperties(char* pLayerName, uint* pPropertyCount, ExtensionProperties* pProperties);
        public delegate Result PFN_vkEnumerateDeviceExtensionProperties(PhysicalDevice physicalDevice, char* pLayerName, uint* pPropertyCount, ExtensionProperties* pProperties);
        public delegate Result PFN_vkEnumerateInstanceLayerProperties(uint* pPropertyCount, LayerProperties* pProperties);
        public delegate Result PFN_vkEnumerateDeviceLayerProperties(PhysicalDevice physicalDevice, uint* pPropertyCount, LayerProperties* pProperties);
        public delegate void PFN_vkGetDeviceQueue(Device device, uint queueFamilyIndex, uint queueIndex, Queue* pQueue);
        public delegate Result PFN_vkQueueSubmit(Queue queue, uint submitCount, SubmitInfo* pSubmits, Fence fence);
        public delegate Result PFN_vkQueueWaitIdle(Queue queue);
        public delegate Result PFN_vkDeviceWaitIdle(Device device);
        public delegate Result PFN_vkAllocateMemory(Device device, MemoryAllocateInfo* pAllocateInfo, AllocationCallbacks* pAllocator, DeviceMemory* pMemory);
        public delegate void PFN_vkFreeMemory(Device device, DeviceMemory memory, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkMapMemory(Device device, DeviceMemory memory, ulong VkDeviceSize_offset, ulong VkDeviceSize_size, uint VMemoryMapFlags_flags, void** ppData);
        public delegate void PFN_vkUnmapMemory(Device device, DeviceMemory memory);
        public delegate Result PFN_vkFlushMappedMemoryRanges(Device device, uint memoryRangeCount, MappedMemoryRange* pMemoryRanges);
        public delegate Result PFN_vkInvalidateMappedMemoryRanges(Device device, uint memoryRangeCount, MappedMemoryRange* pMemoryRanges);
        public delegate void PFN_vkGetDeviceMemoryCommitment(Device device, DeviceMemory memory, ulong VkDeviceSize_pCommittedMemoryInBytes);
        public delegate Result PFN_vkBindBufferMemory(Device device, Buffer buffer, DeviceMemory memory, ulong VkDeviceSize_memoryOffset);
        public delegate Result PFN_vkBindImageMemory(Device device, Image image, DeviceMemory memory, ulong VkDeviceSize_memoryOffset);
        public delegate void PFN_vkGetBufferMemoryRequirements(Device device, Buffer buffer, MemoryRequirements* pMemoryRequirements);
        public delegate void PFN_vkGetImageMemoryRequirements(Device device, Image image, MemoryRequirements* pMemoryRequirements);
        public delegate void PFN_vkGetImageSparseMemoryRequirements(Device device, Image image, uint* pSparseMemoryRequirementCount, SparseImageMemoryRequirements* pSparseMemoryRequirements);
        public delegate void PFN_vkGetPhysicalDeviceSparseImageFormatProperties(PhysicalDevice physicalDevice, Format format, ImageType type, SampleCountFlagBits samples, uint VkImageUsageFlags_usage, ImageTiling tiling, uint* pPropertyCount, SparseImageFormatProperties* pProperties);
        public delegate Result PFN_vkQueueBindSparse(Queue queue, uint bindInfoCount, BindSparseInfo* pBindInfo, Fence fence);
        public delegate Result PFN_vkCreateFence(Device device, FenceCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Fence* pFence);
        public delegate void PFN_vkDestroyFence(Device device, Fence fence, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkResetFences(Device device, uint fenceCount, Fence* pFences);
        public delegate Result PFN_vkGetFenceStatus(Device device, Fence fence);
        public delegate Result PFN_vkWaitForFences(Device device, uint fenceCount, Fence* pFences, uint VkBool32_waitAll, ulong timeout);
        public delegate Result PFN_vkCreateSemaphore(Device device, SemaphoreCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Semaphore* pSemaphore);
        public delegate void PFN_vkDestroySemaphore(Device device, Semaphore semaphore, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkCreateEvent(Device device, EventCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Event* pEvent);
        public delegate void PFN_vkDestroyEvent(Device device, Event _event, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkGetEventStatus(Device device, Event _event);
        public delegate Result PFN_vkSetEvent(Device device, Event _event);
        public delegate Result PFN_vkResetEvent(Device device, Event _event);
        public delegate Result PFN_vkCreateQueryPool(Device device, QueryPoolCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, QueryPool* pQueryPool);
        public delegate void PFN_vkDestroyQueryPool(Device device, QueryPool queryPool, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkGetQueryPoolResults(Device device, QueryPool queryPool, uint firstQuery, uint queryCount, uint dataSize, void* pData, ulong VkDeviceSize_stride, uint VkQueryResultFlags_flags);
        public delegate Result PFN_vkCreateBuffer(Device device, BufferCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Buffer* pBuffer);
        public delegate void PFN_vkDestroyBuffer(Device device, Buffer buffer, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkCreateBufferView(Device device, BufferViewCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, BufferView* pView);
        public delegate void PFN_vkDestroyBufferView(Device device, BufferView bufferView, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkCreateImage(Device device, ImageCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Image* pImage);
        public delegate void PFN_vkDestroyImage(Device device, Image image, AllocationCallbacks* pAllocator);
        public delegate void PFN_vkGetImageSubresourceLayout(Device device, Image image, ImageSubresource* pSubresource, SubresourceLayout* pLayout);
        public delegate Result PFN_vkCreateImageView(Device device, ImageViewCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, ImageView* pView);
        public delegate void PFN_vkDestroyImageView(Device device, ImageView imageView, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkCreateShaderModule(Device device, ShaderModuleCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, ShaderModule* pShaderModule);
        public delegate void PFN_vkDestroyShaderModule(Device device, ShaderModule shaderModule, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkCreatePipelineCache(Device device, PipelineCacheCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, PipelineCache* pPipelineCache);
        public delegate void PFN_vkDestroyPipelineCache(Device device, PipelineCache pipelineCache, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkGetPipelineCacheData(Device device, PipelineCache pipelineCache, uint* pDataSize, void* pData);
        public delegate Result PFN_vkMergePipelineCaches(Device device, PipelineCache dstCache, uint srcCacheCount, PipelineCache* pSrcCaches);
        public delegate Result PFN_vkCreateGraphicsPipelines(Device device, PipelineCache pipelineCache, uint createInfoCount, GraphicsPipelineCreateInfo* pCreateInfos, AllocationCallbacks* pAllocator, Pipeline* pPipelines);
        public delegate Result PFN_vkCreateComputePipelines(Device device, PipelineCache pipelineCache, uint createInfoCount, ComputePipelineCreateInfo* pCreateInfos, AllocationCallbacks* pAllocator, Pipeline* pPipelines);
        public delegate void PFN_vkDestroyPipeline(Device device, Pipeline pipeline, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkCreatePipelineLayout(Device device, PipelineLayoutCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, PipelineLayout* pPipelineLayout);
        public delegate void PFN_vkDestroyPipelineLayout(Device device, PipelineLayout pipelineLayout, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkCreateSampler(Device device, SamplerCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Sampler* pSampler);
        public delegate void PFN_vkDestroySampler(Device device, Sampler sampler, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkCreateDescriptorSetLayout(Device device, DescriptorSetLayoutCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, DescriptorSetLayout* pSetLayout);
        public delegate void PFN_vkDestroyDescriptorSetLayout(Device device, DescriptorSetLayout descriptorSetLayout, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkCreateDescriptorPool(Device device, DescriptorPoolCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, DescriptorPool* pDescriptorPool);
        public delegate void PFN_vkDestroyDescriptorPool(Device device, DescriptorPool descriptorPool, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkResetDescriptorPool(Device device, DescriptorPool descriptorPool, uint VkDescriptorPoolResetFlags_flags);
        public delegate Result PFN_vkAllocateDescriptorSets(Device device, DescriptorSetAllocateInfo* pAllocateInfo, DescriptorSet* pDescriptorSets);
        public delegate Result PFN_vkFreeDescriptorSets(Device device, DescriptorPool descriptorPool, uint descriptorSetCount, DescriptorSet* pDescriptorSets);
        public delegate void PFN_vkUpdateDescriptorSets(Device device, uint descriptorWriteCount, WriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, CopyDescriptorSet* pDescriptorCopies);
        public delegate Result PFN_vkCreateFramebuffer(Device device, FramebufferCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, Framebuffer* pFramebuffer);
        public delegate void PFN_vkDestroyFramebuffer(Device device, Framebuffer framebuffer, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkCreateRenderPass(Device device, RenderPassCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, RenderPass* pRenderPass);
        public delegate void PFN_vkDestroyRenderPass(Device device, RenderPass renderPass, AllocationCallbacks* pAllocator);
        public delegate void PFN_vkGetRenderAreaGranularity(Device device, RenderPass renderPass, Extent2D* pGranularity);
        public delegate Result PFN_vkCreateCommandPool(Device device, CommandPoolCreateInfo* pCreateInfo, AllocationCallbacks* pAllocator, CommandPool* pCommandPool);
        public delegate void PFN_vkDestroyCommandPool(Device device, CommandPool commandPool, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkResetCommandPool(Device device, CommandPool commandPool, uint VkCommandPoolResetFlags_flags);
        public delegate Result PFN_vkAllocateCommandBuffers(Device device, CommandBufferAllocateInfo* pAllocateInfo, CommandBuffer* pCommandBuffers);
        public delegate void PFN_vkFreeCommandBuffers(Device device, CommandPool commandPool, uint commandBufferCount, CommandBuffer* pCommandBuffers);
        public delegate Result PFN_vkBeginCommandBuffer(CommandBuffer commandBuffer, CommandBufferBeginInfo* pBeginInfo);
        public delegate Result PFN_vkEndCommandBuffer(CommandBuffer commandBuffer);
        public delegate Result PFN_vkResetCommandBuffer(CommandBuffer commandBuffer, uint VkCommandBufferResetFlags_flags);
        public delegate void PFN_vkCmdBindPipeline(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, Pipeline pipeline);
        public delegate void PFN_vkCmdSetViewport(CommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Viewport* pViewports);
        public delegate void PFN_vkCmdSetScissor(CommandBuffer commandBuffer, uint firstScissor, uint scissorCount, Rect2D* pScissors);
        public delegate void PFN_vkCmdSetLineWidth(CommandBuffer commandBuffer, float lineWidth);
        public delegate void PFN_vkCmdSetDepthBias(CommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
        public delegate void PFN_vkCmdSetBlendConstants(CommandBuffer commandBuffer, float[4] blendConstants);
        public delegate void PFN_vkCmdSetDepthBounds(CommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
        public delegate void PFN_vkCmdSetStencilCompareMask(CommandBuffer commandBuffer, uint VkStencilFaceFlags_faceMask, uint compareMask);
        public delegate void PFN_vkCmdSetStencilWriteMask(CommandBuffer commandBuffer, uint VkStencilFaceFlags_faceMask, uint writeMask);
        public delegate void PFN_vkCmdSetStencilReference(CommandBuffer commandBuffer, uint VkStencilFaceFlags_faceMask, uint reference);
        public delegate void PFN_vkCmdBindDescriptorSets(CommandBuffer commandBuffer, PipelineBindPoint pipelineBindPoint, PipelineLayout layout, uint firstSet, uint descriptorSetCount, DescriptorSet* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets);
        public delegate void PFN_vkCmdBindIndexBuffer(CommandBuffer commandBuffer, Buffer buffer, ulong VkDeviceSize_offset, IndexType indexType);
        public delegate void PFN_vkCmdBindVertexBuffers(CommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Buffer* pBuffers, ulong* VkDeviceSize_pOffsets);
        public delegate void PFN_vkCmdDraw(CommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
        public delegate void PFN_vkCmdDrawIndexed(CommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);
        public delegate void PFN_vkCmdDrawIndirect(CommandBuffer commandBuffer, Buffer buffer, ulong VkDeviceSize_offset, uint drawCount, uint stride);
        public delegate void PFN_vkCmdDrawIndexedIndirect(CommandBuffer commandBuffer, Buffer buffer, ulong VkDeviceSize_offset, uint drawCount, uint stride);
        public delegate void PFN_vkCmdDispatch(CommandBuffer commandBuffer, uint x, uint y, uint z);
        public delegate void PFN_vkCmdDispatchIndirect(CommandBuffer commandBuffer, Buffer buffer, ulong VkDeviceSize_offset);
        public delegate void PFN_vkCmdCopyBuffer(CommandBuffer commandBuffer, Buffer srcBuffer, Buffer dstBuffer, uint regionCount, BufferCopy* pRegions);
        public delegate void PFN_vkCmdCopyImage(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageCopy* pRegions);
        public delegate void PFN_vkCmdBlitImage(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageBlit* pRegions, Filter filter);
        public delegate void PFN_vkCmdCopyBufferToImage(CommandBuffer commandBuffer, Buffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, uint regionCount, BufferImageCopy* pRegions);
        public delegate void PFN_vkCmdCopyImageToBuffer(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Buffer dstBuffer, uint regionCount, BufferImageCopy* pRegions);
        public delegate void PFN_vkCmdUpdateBuffer(CommandBuffer commandBuffer, Buffer dstBuffer, ulong VkDeviceSize_dstOffset, ulong VkDeviceSize_dataSize, uint* pData);
        public delegate void PFN_vkCmdFillBuffer(CommandBuffer commandBuffer, Buffer dstBuffer, ulong VkDeviceSize_dstOffset, ulong VkDeviceSize_size, uint data);
        public delegate void PFN_vkCmdClearColorImage(CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, ClearColorValue* pColor, uint rangeCount, ImageSubresourceRange* pRanges);
        public delegate void PFN_vkCmdClearDepthStencilImage(CommandBuffer commandBuffer, Image image, ImageLayout imageLayout, ClearDepthStencilValue* pDepthStencil, uint rangeCount, ImageSubresourceRange* pRanges);
        public delegate void PFN_vkCmdClearAttachments(CommandBuffer commandBuffer, uint attachmentCount, ClearAttachment* pAttachments, uint rectCount, ClearRect* pRects);
        public delegate void PFN_vkCmdResolveImage(CommandBuffer commandBuffer, Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, uint regionCount, ImageResolve* pRegions);
        public delegate void PFN_vkCmdSetEvent(CommandBuffer commandBuffer, Event _event, uint VkPipelineStageFlags_stageMask);
        public delegate void PFN_vkCmdResetEvent(CommandBuffer commandBuffer, Event _event, uint VkPipelineStageFlags_stageMask);
        public delegate void PFN_vkCmdWaitEvents(CommandBuffer commandBuffer, uint _eventCount, Event* pEvents, uint VkPipelineStageFlags_srcStageMask, uint VkPipelineStageFlags_dstStageMask, uint memoryBarrierCount, MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ImageMemoryBarrier* pImageMemoryBarriers);
        public delegate void PFN_vkCmdPipelineBarrier(CommandBuffer commandBuffer, uint VkPipelineStageFlags_srcStageMask, uint VkPipelineStageFlags_dstStageMask, uint VkDependencyFlags_dependencyFlags, uint memoryBarrierCount, MemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ImageMemoryBarrier* pImageMemoryBarriers);
        public delegate void PFN_vkCmdBeginQuery(CommandBuffer commandBuffer, QueryPool queryPool, uint query, uint VkQueryControlFlags_flags);
        public delegate void PFN_vkCmdEndQuery(CommandBuffer commandBuffer, QueryPool queryPool, uint query);
        public delegate void PFN_vkCmdResetQueryPool(CommandBuffer commandBuffer, QueryPool queryPool, uint firstQuery, uint queryCount);
        public delegate void PFN_vkCmdWriteTimestamp(CommandBuffer commandBuffer, PipelineStageFlagBits pipelineStage, QueryPool queryPool, uint query);
        public delegate void PFN_vkCmdCopyQueryPoolResults(CommandBuffer commandBuffer, QueryPool queryPool, uint firstQuery, uint queryCount, Buffer dstBuffer, ulong VkDeviceSize_dstOffset, ulong VkDeviceSize_stride, uint VkQueryResultFlags_flags);
        public delegate void PFN_vkCmdPushConstants(CommandBuffer commandBuffer, PipelineLayout layout, uint VkShaderStageFlags_stageFlags, uint offset, uint size, void* pValues);
        public delegate void PFN_vkCmdBeginRenderPass(CommandBuffer commandBuffer, RenderPassBeginInfo* pRenderPassBegin, SubpassContents contents);
        public delegate void PFN_vkCmdNextSubpass(CommandBuffer commandBuffer, SubpassContents contents);
        public delegate void PFN_vkCmdEndRenderPass(CommandBuffer commandBuffer);
        public delegate void PFN_vkCmdExecuteCommands(CommandBuffer commandBuffer, uint commandBufferCount, CommandBuffer* pCommandBuffers);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateInstance")]
        public extern static Result CreateInstance(
            InstanceCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            Instance* pInstance);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyInstance")]
        public extern static void DestroyInstance(
             Instance instance,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkEnumeratePhysicalDevices")]
        public extern static Result EnumeratePhysicalDevices(
            Instance instance,
           uint* pPhysicalDeviceCount,
            PhysicalDevice* pPhysicalDevices);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceFeatures")]
        public extern static void GetPhysicalDeviceFeatures(
             PhysicalDevice physicalDevice,
             PhysicalDeviceFeatures* pFeatures);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceFormatProperties")]
        public extern static void GetPhysicalDeviceFormatProperties(
             PhysicalDevice physicalDevice,
             Format format,
             FormatProperties* pFormatProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceImageFormatProperties")]
        public extern static Result GetPhysicalDeviceImageFormatProperties(
            PhysicalDevice physicalDevice,
            Format format,
            ImageType type,
            ImageTiling tiling,
            uint VkImageUsageFlags_usage,
            uint VkImageCreateFlags_flags,
            ImageFormatProperties* pImageFormatProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceProperties")]
        public extern static void GetPhysicalDeviceProperties(
             PhysicalDevice physicalDevice,
             PhysicalDeviceProperties* pProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceQueueFamilyProperties")]
        public extern static void GetPhysicalDeviceQueueFamilyProperties(
             PhysicalDevice physicalDevice,
            uint* pQueueFamilyPropertyCount,
             QueueFamilyProperties* pQueueFamilyProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceMemoryProperties")]
        public extern static void GetPhysicalDeviceMemoryProperties(
             PhysicalDevice physicalDevice,
             PhysicalDeviceMemoryProperties* pMemoryProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetInstanceProcAddr")]
        public extern static PFN_vkVoidFunction GetInstanceProcAddr(
             Instance instance,
            char* pName);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetDeviceProcAddr")]
        public extern static PFN_vkVoidFunction GetDeviceProcAddr(
             Device device,
            char* pName);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateDevice")]
        public extern static Result CreateDevice(
            PhysicalDevice physicalDevice,
            DeviceCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            Device* pDevice);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyDevice")]
        public extern static void DestroyDevice(
             Device device,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkEnumerateInstanceExtensionProperties")]
        public extern static Result EnumerateInstanceExtensionProperties(
           char* pLayerName,
           uint* pPropertyCount,
            ExtensionProperties* pProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkEnumerateDeviceExtensionProperties")]
        public extern static Result EnumerateDeviceExtensionProperties(
            PhysicalDevice physicalDevice,
           char* pLayerName,
           uint* pPropertyCount,
            ExtensionProperties* pProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkEnumerateInstanceLayerProperties")]
        public extern static Result EnumerateInstanceLayerProperties(
           uint* pPropertyCount,
            LayerProperties* pProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkEnumerateDeviceLayerProperties")]
        public extern static Result EnumerateDeviceLayerProperties(
            PhysicalDevice physicalDevice,
           uint* pPropertyCount,
            LayerProperties* pProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetDeviceQueue")]
        public extern static void GetDeviceQueue(
             Device device,
            uint queueFamilyIndex,
            uint queueIndex,
             Queue* pQueue);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkQueueSubmit")]
        public extern static Result QueueSubmit(
            Queue queue,
           uint submitCount,
            SubmitInfo* pSubmits,
            Fence fence);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkQueueWaitIdle")]
        public extern static Result QueueWaitIdle(
            Queue queue);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDeviceWaitIdle")]
        public extern static Result DeviceWaitIdle(
            Device device);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkAllocateMemory")]
        public extern static Result AllocateMemory(
            Device device,
            MemoryAllocateInfo* pAllocateInfo,
            AllocationCallbacks* pAllocator,
            DeviceMemory* pMemory);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkFreeMemory")]
        public extern static void FreeMemory(
             Device device,
             DeviceMemory memory,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkMapMemory")]
        public extern static Result MapMemory(
            Device device,
            DeviceMemory memory,
            ulong VkDeviceSize_offset,
            ulong VkDeviceSize_size,
            uint VkMemoryMapFlags_flags,
           void** ppData);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkUnmapMemory")]
        public extern static void UnmapMemory(
             Device device,
             DeviceMemory memory);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkFlushMappedMemoryRanges")]
        public extern static Result FlushMappedMemoryRanges(
            Device device,
           uint memoryRangeCount,
            MappedMemoryRange* pMemoryRanges);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkInvalidateMappedMemoryRanges")]
        public extern static Result InvalidateMappedMemoryRanges(
            Device device,
           uint memoryRangeCount,
            MappedMemoryRange* pMemoryRanges);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetDeviceMemoryCommitment")]
        public extern static void GetDeviceMemoryCommitment(
             Device device,
             DeviceMemory memory,
             ulong* VkDeviceSize_pCommittedMemoryInBytes);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkBindBufferMemory")]
        public extern static Result BindBufferMemory(
            Device device,
            Buffer buffer,
            DeviceMemory memory,
            ulong VkDeviceSize_memoryOffset);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkBindImageMemory")]
        public extern static Result BindImageMemory(
            Device device,
            Image image,
            DeviceMemory memory,
            ulong VkDeviceSize_memoryOffset);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetBufferMemoryRequirements")]
        public extern static void GetBufferMemoryRequirements(
             Device device,
             Buffer buffer,
             MemoryRequirements* pMemoryRequirements);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetImageMemoryRequirements")]
        public extern static void GetImageMemoryRequirements(
             Device device,
             Image image,
             MemoryRequirements* pMemoryRequirements);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetImageSparseMemoryRequirements")]
        public extern static void GetImageSparseMemoryRequirements(
             Device device,
             Image image,
            uint* pSparseMemoryRequirementCount,
             SparseImageMemoryRequirements* pSparseMemoryRequirements);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceSparseImageFormatProperties")]
        public extern static void GetPhysicalDeviceSparseImageFormatProperties(
             PhysicalDevice physicalDevice,
             Format format,
             ImageType type,
             SampleCountFlagBits samples,
             uint VkImageUsageFlags_usage,
             ImageTiling tiling,
            uint* pPropertyCount,
             SparseImageFormatProperties* pProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkQueueBindSparse")]
        public extern static Result QueueBindSparse(
            Queue queue,
           uint bindInfoCount,
            BindSparseInfo* pBindInfo,
            Fence fence);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateFence")]
        public extern static Result CreateFence(
            Device device,
            FenceCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            Fence* pFence);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyFence")]
        public extern static void DestroyFence(
             Device device,
             Fence fence,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkResetFences")]
        public extern static Result ResetFences(
            Device device,
           uint fenceCount,
            Fence* pFences);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetFenceStatus")]
        public extern static Result GetFenceStatus(
            Device device,
            Fence fence);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkWaitForFences")]
        public extern static Result WaitForFences(
            Device device,
           uint fenceCount,
            Fence* pFences,
            uint VkBool32_waitAll,
           ulong timeout);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateSemaphore")]
        public extern static Result CreateSemaphore(
            Device device,
            SemaphoreCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            Semaphore* pSemaphore);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroySemaphore")]
        public extern static void DestroySemaphore(
             Device device,
             Semaphore semaphore,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateEvent")]
        public extern static Result CreateEvent(
            Device device,
            EventCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            Event* pEvent);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyEvent")]
        public extern static void DestroyEvent(
             Device device,
             Event                                     _event,
             AllocationCallbacks*                pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetEventStatus")]
        public extern static Result GetEventStatus(
             Device device,
             Event                                     _event);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkSetEvent")]
        public extern static Result SetEvent(
             Device device,
             Event                                     _event);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkResetEvent")]
        public extern static Result ResetEvent(
             Device device,
             Event                                     _event);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateQueryPool")]
        public extern static Result CreateQueryPool(
             Device device,
             QueryPoolCreateInfo*                pCreateInfo,
             AllocationCallbacks*                pAllocator,
             QueryPool*                                pQueryPool);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyQueryPool")]
        public extern static void DestroyQueryPool(
             Device device,
             QueryPool queryPool,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetQueryPoolResults")]
        public extern static Result GetQueryPoolResults(
            Device device,
            QueryPool queryPool,
           uint firstQuery,
           uint queryCount,
           uint dataSize,
           void* pData,
            ulong VkDeviceSize_stride,
            uint VkQueryResultFlags_flags);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateBuffer")]
        public extern static Result CreateBuffer(
            Device device,
            BufferCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            Buffer* pBuffer);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyBuffer")]
        public extern static void DestroyBuffer(
             Device device,
             Buffer buffer,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateBufferView")]
        public extern static Result CreateBufferView(
            Device device,
            BufferViewCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            BufferView* pView);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyBufferView")]
        public extern static void DestroyBufferView(
             Device device,
             BufferView bufferView,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateImage")]
        public extern static Result CreateImage(
            Device device,
            ImageCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            Image* pImage);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyImage")]
        public extern static void DestroyImage(
             Device device,
             Image image,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetImageSubresourceLayout")]
        public extern static void GetImageSubresourceLayout(
             Device device,
             Image image,
             ImageSubresource* pSubresource,
             SubresourceLayout* pLayout);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateImageView")]
        public extern static Result CreateImageView(
            Device device,
            ImageViewCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            ImageView* pView);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyImageView")]
        public extern static void DestroyImageView(
             Device device,
             ImageView imageView,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateShaderModule")]
        public extern static Result CreateShaderModule(
            Device device,
            ShaderModuleCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            ShaderModule* pShaderModule);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyShaderModule")]
        public extern static void DestroyShaderModule(
             Device device,
             ShaderModule shaderModule,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreatePipelineCache")]
        public extern static Result CreatePipelineCache(
            Device device,
            PipelineCacheCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            PipelineCache* pPipelineCache);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyPipelineCache")]
        public extern static void DestroyPipelineCache(
             Device device,
             PipelineCache pipelineCache,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPipelineCacheData")]
        public extern static Result GetPipelineCacheData(
            Device device,
            PipelineCache pipelineCache,
           uint* pDataSize,
           void* pData);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkMergePipelineCaches")]
        public extern static Result MergePipelineCaches(
            Device device,
            PipelineCache dstCache,
           uint srcCacheCount,
            PipelineCache* pSrcCaches);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateGraphicsPipelines")]
        public extern static Result CreateGraphicsPipelines(
            Device device,
            PipelineCache pipelineCache,
           uint createInfoCount,
            GraphicsPipelineCreateInfo* pCreateInfos,
            AllocationCallbacks* pAllocator,
            Pipeline* pPipelines);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateComputePipelines")]
        public extern static Result CreateComputePipelines(
            Device device,
            PipelineCache pipelineCache,
           uint createInfoCount,
            ComputePipelineCreateInfo* pCreateInfos,
            AllocationCallbacks* pAllocator,
            Pipeline* pPipelines);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyPipeline")]
        public extern static void DestroyPipeline(
             Device device,
             Pipeline pipeline,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreatePipelineLayout")]
        public extern static Result CreatePipelineLayout(
            Device device,
            PipelineLayoutCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            PipelineLayout* pPipelineLayout);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyPipelineLayout")]
        public extern static void DestroyPipelineLayout(
             Device device,
             PipelineLayout pipelineLayout,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateSampler")]
        public extern static Result CreateSampler(
            Device device,
            SamplerCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            Sampler* pSampler);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroySampler")]
        public extern static void DestroySampler(
             Device device,
             Sampler sampler,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateDescriptorSetLayout")]
        public extern static Result CreateDescriptorSetLayout(
            Device device,
            DescriptorSetLayoutCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            DescriptorSetLayout* pSetLayout);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyDescriptorSetLayout")]
        public extern static void DestroyDescriptorSetLayout(
             Device device,
             DescriptorSetLayout descriptorSetLayout,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateDescriptorPool")]
        public extern static Result CreateDescriptorPool(
            Device device,
            DescriptorPoolCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            DescriptorPool* pDescriptorPool);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyDescriptorPool")]
        public extern static void DestroyDescriptorPool(
             Device device,
             DescriptorPool descriptorPool,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkResetDescriptorPool")]
        public extern static Result ResetDescriptorPool(
            Device device,
            DescriptorPool descriptorPool,
            uint VkDescriptorPoolResetFlags_flags);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkAllocateDescriptorSets")]
        public extern static Result AllocateDescriptorSets(
            Device device,
            DescriptorSetAllocateInfo* pAllocateInfo,
            DescriptorSet* pDescriptorSets);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkFreeDescriptorSets")]
        public extern static Result FreeDescriptorSets(
            Device device,
            DescriptorPool descriptorPool,
           uint descriptorSetCount,
            DescriptorSet* pDescriptorSets);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkUpdateDescriptorSets")]
        public extern static void UpdateDescriptorSets(
             Device device,
            uint descriptorWriteCount,
             WriteDescriptorSet* pDescriptorWrites,
            uint descriptorCopyCount,
             CopyDescriptorSet* pDescriptorCopies);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateFramebuffer")]
        public extern static Result CreateFramebuffer(
            Device device,
            FramebufferCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            Framebuffer* pFramebuffer);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyFramebuffer")]
        public extern static void DestroyFramebuffer(
             Device device,
             Framebuffer framebuffer,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateRenderPass")]
        public extern static Result CreateRenderPass(
            Device device,
            RenderPassCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            RenderPass* pRenderPass);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyRenderPass")]
        public extern static void DestroyRenderPass(
             Device device,
             RenderPass renderPass,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetRenderAreaGranularity")]
        public extern static void GetRenderAreaGranularity(
             Device device,
             RenderPass renderPass,
             Extent2D* pGranularity);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateCommandPool")]
        public extern static Result CreateCommandPool(
            Device device,
            CommandPoolCreateInfo* pCreateInfo,
            AllocationCallbacks* pAllocator,
            CommandPool* pCommandPool);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyCommandPool")]
        public extern static void DestroyCommandPool(
             Device device,
             CommandPool commandPool,
             AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkResetCommandPool")]
        public extern static Result ResetCommandPool(
            Device device,
            CommandPool commandPool,
            uint VkCommandPoolResetFlags_flags);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkAllocateCommandBuffers")]
        public extern static Result AllocateCommandBuffers(
            Device device,
            CommandBufferAllocateInfo* pAllocateInfo,
            CommandBuffer* pCommandBuffers);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkFreeCommandBuffers")]
        public extern static void FreeCommandBuffers(
             Device device,
             CommandPool commandPool,
            uint commandBufferCount,
             CommandBuffer* pCommandBuffers);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkBeginCommandBuffer")]
        public extern static Result BeginCommandBuffer(
            CommandBuffer commandBuffer,
            CommandBufferBeginInfo* pBeginInfo);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkEndCommandBuffer")]
        public extern static Result EndCommandBuffer(
            CommandBuffer commandBuffer);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkResetCommandBuffer")]
        public extern static Result ResetCommandBuffer(
            CommandBuffer commandBuffer,
            uint VkCommandBufferResetFlags_flags);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdBindPipeline")]
        public extern static void CmdBindPipeline(
             CommandBuffer commandBuffer,
             PipelineBindPoint pipelineBindPoint,
             Pipeline pipeline);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdSetViewport")]
        public extern static void CmdSetViewport(
             CommandBuffer commandBuffer,
            uint firstViewport,
            uint viewportCount,
             Viewport* pViewports);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdSetScissor")]
        public extern static void CmdSetScissor(
             CommandBuffer commandBuffer,
            uint firstScissor,
            uint scissorCount,
             Rect2D* pScissors);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdSetLineWidth")]
        public extern static void CmdSetLineWidth(
             CommandBuffer commandBuffer,
            float lineWidth);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdSetDepthBias")]
        public extern static void CmdSetDepthBias(
             CommandBuffer commandBuffer,
            float depthBiasConstantFactor,
            float depthBiasClamp,
            float depthBiasSlopeFactor);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdSetBlendConstants")]
        public extern static void CmdSetBlendConstants(
             CommandBuffer commandBuffer,
            float[4] blendConstants);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdSetDepthBounds")]
        public extern static void CmdSetDepthBounds(
             CommandBuffer commandBuffer,
            float minDepthBounds,
            float maxDepthBounds);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdSetStencilCompareMask")]
        public extern static void CmdSetStencilCompareMask(
             CommandBuffer commandBuffer,
             uint VkStencilFaceFlags_faceMask,
            uint compareMask);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdSetStencilWriteMask")]
        public extern static void CmdSetStencilWriteMask(
             CommandBuffer commandBuffer,
             uint VkStencilFaceFlags_faceMask,
            uint writeMask);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdSetStencilReference")]
        public extern static void CmdSetStencilReference(
             CommandBuffer commandBuffer,
             uint VkStencilFaceFlags_faceMask,
            uint reference);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdBindDescriptorSets")]
        public extern static void CmdBindDescriptorSets(
             CommandBuffer commandBuffer,
             PipelineBindPoint pipelineBindPoint,
             PipelineLayout layout,
            uint firstSet,
            uint descriptorSetCount,
             DescriptorSet* pDescriptorSets,
            uint dynamicOffsetCount,
            uint* pDynamicOffsets);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdBindIndexBuffer")]
        public extern static void CmdBindIndexBuffer(
             CommandBuffer commandBuffer,
             Buffer buffer,
             ulong VkDeviceSize_offset,
             IndexType indexType);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdBindVertexBuffers")]
        public extern static void CmdBindVertexBuffers(
             CommandBuffer commandBuffer,
            uint firstBinding,
            uint bindingCount,
             Buffer* pBuffers,
             ulong* VkDeviceSize_pOffsets);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdDraw")]
        public extern static void CmdDraw(
             CommandBuffer commandBuffer,
            uint vertexCount,
            uint instanceCount,
            uint firstVertex,
            uint firstInstance);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdDrawIndexed")]
        public extern static void CmdDrawIndexed(
             CommandBuffer commandBuffer,
            uint indexCount,
            uint instanceCount,
            uint firstIndex,
            int vertexOffset,
            uint firstInstance);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdDrawIndirect")]
        public extern static void CmdDrawIndirect(
             CommandBuffer commandBuffer,
             Buffer buffer,
             ulong VkDeviceSize_offset,
            uint drawCount,
            uint stride);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdDrawIndexedIndirect")]
        public extern static void CmdDrawIndexedIndirect(
             CommandBuffer commandBuffer,
             Buffer buffer,
             ulong VkDeviceSize_offset,
            uint drawCount,
            uint stride);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdDispatch")]
        public extern static void CmdDispatch(
             CommandBuffer commandBuffer,
            uint x,
            uint y,
            uint z);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdDispatchIndirect")]
        public extern static void CmdDispatchIndirect(
             CommandBuffer commandBuffer,
             Buffer buffer,
             ulong VkDeviceSize_offset);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdCopyBuffer")]
        public extern static void CmdCopyBuffer(
             CommandBuffer commandBuffer,
             Buffer srcBuffer,
             Buffer dstBuffer,
            uint regionCount,
             BufferCopy* pRegions);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdCopyImage")]
        public extern static void CmdCopyImage(
             CommandBuffer commandBuffer,
             Image srcImage,
             ImageLayout srcImageLayout,
             Image dstImage,
             ImageLayout dstImageLayout,
            uint regionCount,
             ImageCopy* pRegions);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdBlitImage")]
        public extern static void CmdBlitImage(
             CommandBuffer commandBuffer,
             Image srcImage,
             ImageLayout srcImageLayout,
             Image dstImage,
             ImageLayout dstImageLayout,
            uint regionCount,
             ImageBlit* pRegions,
             Filter filter);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdCopyBufferToImage")]
        public extern static void CmdCopyBufferToImage(
             CommandBuffer commandBuffer,
             Buffer srcBuffer,
             Image dstImage,
             ImageLayout dstImageLayout,
            uint regionCount,
             BufferImageCopy* pRegions);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdCopyImageToBuffer")]
        public extern static void CmdCopyImageToBuffer(
             CommandBuffer commandBuffer,
             Image srcImage,
             ImageLayout srcImageLayout,
             Buffer dstBuffer,
            uint regionCount,
             BufferImageCopy* pRegions);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdUpdateBuffer")]
        public extern static void CmdUpdateBuffer(
             CommandBuffer commandBuffer,
             Buffer dstBuffer,
             ulong VkDeviceSize_dstOffset,
             ulong VkDeviceSize_dataSize,
            uint* pData);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdFillBuffer")]
        public extern static void CmdFillBuffer(
             CommandBuffer commandBuffer,
             Buffer dstBuffer,
             ulong VkDeviceSize_dstOffset,
             ulong VkDeviceSize_size,
            uint data);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdClearColorImage")]
        public extern static void CmdClearColorImage(
             CommandBuffer commandBuffer,
             Image image,
             ImageLayout imageLayout,
             ClearColorValue* pColor,
            uint rangeCount,
             ImageSubresourceRange* pRanges);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdClearDepthStencilImage")]
        public extern static void CmdClearDepthStencilImage(
             CommandBuffer commandBuffer,
             Image image,
             ImageLayout imageLayout,
             ClearDepthStencilValue* pDepthStencil,
            uint rangeCount,
             ImageSubresourceRange* pRanges);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdClearAttachments")]
        public extern static void CmdClearAttachments(
             CommandBuffer commandBuffer,
            uint attachmentCount,
             ClearAttachment* pAttachments,
            uint rectCount,
             ClearRect* pRects);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdResolveImage")]
        public extern static void CmdResolveImage(
             CommandBuffer commandBuffer,
             Image srcImage,
             ImageLayout srcImageLayout,
             Image dstImage,
             ImageLayout dstImageLayout,
            uint regionCount,
             ImageResolve* pRegions);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdSetEvent")]
        public extern static void CmdSetEvent(
             CommandBuffer commandBuffer,
             Event                                     _event,
             uint VkPipelineStageFlags_stageMask);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdResetEvent")]
        public extern static void CmdResetEvent(
             CommandBuffer commandBuffer,
             Event                                     _event,
             uint VkPipelineStageFlags_stageMask);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdWaitEvents")]
        public extern static void CmdWaitEvents(
             CommandBuffer commandBuffer,
            uint eventCount,
             Event* pEvents,
             uint VkPipelineStageFlags_srcStageMask,
             uint VkPipelineStageFlags_dstStageMask,
            uint memoryBarrierCount,
             MemoryBarrier* pMemoryBarriers,
            uint bufferMemoryBarrierCount,
             BufferMemoryBarrier* pBufferMemoryBarriers,
            uint imageMemoryBarrierCount,
             ImageMemoryBarrier* pImageMemoryBarriers);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdPipelineBarrier")]
        public extern static void CmdPipelineBarrier(
             CommandBuffer commandBuffer,
             uint VkPipelineStageFlags_srcStageMask,
             uint VkPipelineStageFlags_dstStageMask,
             uint VkDependencyFlags_dependencyFlags,
            uint memoryBarrierCount,
             MemoryBarrier* pMemoryBarriers,
            uint bufferMemoryBarrierCount,
             BufferMemoryBarrier* pBufferMemoryBarriers,
            uint imageMemoryBarrierCount,
             ImageMemoryBarrier* pImageMemoryBarriers);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdBeginQuery")]
        public extern static void CmdBeginQuery(
             CommandBuffer commandBuffer,
             QueryPool queryPool,
            uint query,
             uint VkQueryControlFlags_flags);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdEndQuery")]
        public extern static void CmdEndQuery(
             CommandBuffer commandBuffer,
             QueryPool queryPool,
            uint query);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdResetQueryPool")]
        public extern static void CmdResetQueryPool(
             CommandBuffer commandBuffer,
             QueryPool queryPool,
            uint firstQuery,
            uint queryCount);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdWriteTimestamp")]
        public extern static void CmdWriteTimestamp(
             CommandBuffer commandBuffer,
             PipelineStageFlagBits pipelineStage,
             QueryPool queryPool,
            uint query);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdCopyQueryPoolResults")]
        public extern static void CmdCopyQueryPoolResults(
             CommandBuffer commandBuffer,
             QueryPool queryPool,
            uint firstQuery,
            uint queryCount,
             Buffer dstBuffer,
             ulong VkDeviceSize_dstOffset,
             ulong VkDeviceSize_stride,
             uint VkQueryResultFlags_flags);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdPushConstants")]
        public extern static void CmdPushConstants(
             CommandBuffer commandBuffer,
             PipelineLayout layout,
             uint VkShaderStageFlags_stageFlags,
            uint offset,
            uint size,
            void* pValues);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdBeginRenderPass")]
        public extern static void CmdBeginRenderPass(
             CommandBuffer commandBuffer,
             RenderPassBeginInfo* pRenderPassBegin,
             SubpassContents contents);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdNextSubpass")]
        public extern static void CmdNextSubpass(
             CommandBuffer commandBuffer,
             SubpassContents contents);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdEndRenderPass")]
        public extern static void CmdEndRenderPass(
             CommandBuffer commandBuffer);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCmdExecuteCommands")]
        public extern static void CmdExecuteCommands(
             CommandBuffer commandBuffer,
            uint commandBufferCount,
             CommandBuffer* pCommandBuffers);

        public const int KHR_surface = 1;
        public struct SurfaceKHR { }

        public const int KHR_SURFACE_SPEC_VERSION = 25;
        public const string KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";


        public enum ColorSpaceKHR {
            VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0,
            VK_COLORSPACE_BEGIN_RANGE = VK_COLORSPACE_SRGB_NONLINEAR_KHR,
            VK_COLORSPACE_END_RANGE = VK_COLORSPACE_SRGB_NONLINEAR_KHR,
            VK_COLORSPACE_RANGE_SIZE = (VK_COLORSPACE_SRGB_NONLINEAR_KHR - VK_COLORSPACE_SRGB_NONLINEAR_KHR + 1),
            VK_COLORSPACE_MAX_ENUM = 0x7FFFFFFF
        }

        public enum PresentModeKHR {
            VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
            VK_PRESENT_MODE_MAILBOX_KHR = 1,
            VK_PRESENT_MODE_FIFO_KHR = 2,
            VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
            VK_PRESENT_MODE_BEGIN_RANGE = VK_PRESENT_MODE_IMMEDIATE_KHR,
            VK_PRESENT_MODE_END_RANGE = VK_PRESENT_MODE_FIFO_RELAXED_KHR,
            VK_PRESENT_MODE_RANGE_SIZE = (VK_PRESENT_MODE_FIFO_RELAXED_KHR - VK_PRESENT_MODE_IMMEDIATE_KHR + 1),
            VK_PRESENT_MODE_MAX_ENUM = 0x7FFFFFFF
        }


        public enum SurfaceTransformFlagBitsKHR {
            VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001,
            VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002,
            VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004,
            VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008,
            VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,
            VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,
            VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
            VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
            VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100,
        }

        public enum CompositeAlphaFlagBitsKHR {
            VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
            VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002,
            VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,
            VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008,
        }

        public struct SurfaceCapabilitiesKHR {
            public uint minImageCount;
            public uint maxImageCount;
            public Extent2D currentExtent;
            public Extent2D minImageExtent;
            public Extent2D maxImageExtent;
            public uint maxImageArrayLayers;
            public uint VkSurfaceTransformFlagsKHR_supportedTransforms;
            public uint VkSurfaceTransformFlagBitsKHR_currentTransform;
            public uint VkCompositeAlphaFlagsKHR_supportedCompositeAlpha;
            public uint VkImageUsageFlags_supportedUsageFlags;
        }

        public struct SurfaceFormatKHR {
            public Format format;
            public uint VkColorSpaceKHR_colorSpace;
        }


        public delegate void PFN_vkDestroySurfaceKHR(Instance instance, SurfaceKHR surface, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkGetPhysicalDeviceSurfaceSupportKHR(PhysicalDevice physicalDevice, uint queueFamilyIndex, SurfaceKHR surface, uint* VkBool32_pSupported);
        public delegate Result PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(PhysicalDevice physicalDevice, SurfaceKHR surface, SurfaceCapabilitiesKHR* pSurfaceCapabilities);
        public delegate Result PFN_vkGetPhysicalDeviceSurfaceFormatsKHR(PhysicalDevice physicalDevice, SurfaceKHR surface, uint* pSurfaceFormatCount, SurfaceFormatKHR* pSurfaceFormats);
        public delegate Result PFN_vkGetPhysicalDeviceSurfacePresentModesKHR(PhysicalDevice physicalDevice, SurfaceKHR surface, uint* pPresentModeCount, PresentModeKHR* pPresentModes);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroySurfaceKHR")]
        public extern static void DestroySurfaceKHR(
            Instance instance,
            SurfaceKHR surface,
            AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceSurfaceSupportKHR")]
        public extern static Result GetPhysicalDeviceSurfaceSupportKHR(
            PhysicalDevice physicalDevice,
            uint queueFamilyIndex,
            SurfaceKHR surface,
            uint* VkBool32_pSupported);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
        public extern static Result GetPhysicalDeviceSurfaceCapabilitiesKHR(
            PhysicalDevice physicalDevice,
            SurfaceKHR surface,
            SurfaceCapabilitiesKHR* pSurfaceCapabilities);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceSurfaceFormatsKHR")]
        public extern static Result GetPhysicalDeviceSurfaceFormatsKHR(
            PhysicalDevice physicalDevice,
            SurfaceKHR surface,
            uint* pSurfaceFormatCount,
            SurfaceFormatKHR* pSurfaceFormats);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceSurfacePresentModesKHR")]
        public extern static Result GetPhysicalDeviceSurfacePresentModesKHR(
            PhysicalDevice physicalDevice,
            SurfaceKHR surface,
            uint* pPresentModeCount,
            PresentModeKHR* pPresentModes);

        public const int KHR_swapchain = 1;
        public struct SwapchainKHR { }

        public const int KHR_SWAPCHAIN_SPEC_VERSION = 67;
        public const string KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";

        public struct SwapchainCreateInfoKHR {
            public StructureType sType;
            public void* pNext;
            public uint VkSwapchainCreateFlagsKHR_flags;
            public SurfaceKHR surface;
            public uint minImageCount;
            public Format imageFormat;
            public ColorSpaceKHR imageColorSpace;
            public Extent2D imageExtent;
            public uint imageArrayLayers;
            public uint VkImageUsageFlags_imageUsage;
            public SharingMode imageSharingMode;
            public uint queueFamilyIndexCount;
            public uint* pQueueFamilyIndices;
            public SurfaceTransformFlagBitsKHR preTransform;
            public CompositeAlphaFlagBitsKHR compositeAlpha;
            public PresentModeKHR presentMode;
            public uint VkBool32_clipped;
            public SwapchainKHR oldSwapchain;
        }

        public struct PresentInfoKHR {
            public StructureType sType;
            public void* pNext;
            public uint waitSemaphoreCount;
            public Semaphore* pWaitSemaphores;
            public uint swapchainCount;
            public SwapchainKHR* pSwapchains;
            public uint* pImageIndices;
            public Result* pResults;
        }

        public delegate Result PFN_vkCreateSwapchainKHR(Device device, SwapchainCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, SwapchainKHR* pSwapchain);
        public delegate void PFN_vkDestroySwapchainKHR(Device device, SwapchainKHR swapchain, AllocationCallbacks* pAllocator);
        public delegate Result PFN_vkGetSwapchainImagesKHR(Device device, SwapchainKHR swapchain, uint* pSwapchainImageCount, Image* pSwapchainImages);
        public delegate Result PFN_vkAcquireNextImageKHR(Device device, SwapchainKHR swapchain, ulong timeout, Semaphore semaphore, Fence fence, uint* pImageIndex);
        public delegate Result PFN_vkQueuePresentKHR(Queue queue, PresentInfoKHR* pPresentInfo);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateSwapchainKHR")]
        public extern static Result CreateSwapchainKHR(
            Device device,
            SwapchainCreateInfoKHR* pCreateInfo,
            AllocationCallbacks* pAllocator,
            SwapchainKHR* pSwapchain);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroySwapchainKHR")]
        public extern static void DestroySwapchainKHR(
            Device device,
            SwapchainKHR swapchain,
            AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetSwapchainImagesKHR")]
        public extern static Result GetSwapchainImagesKHR(
            Device device,
            SwapchainKHR swapchain,
            uint* pSwapchainImageCount,
            Image* pSwapchainImages);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkAcquireNextImageKHR")]
        public extern static Result AcquireNextImageKHR(
            Device device,
            SwapchainKHR swapchain,
            ulong timeout,
            Semaphore semaphore,
            Fence fence,
            uint* pImageIndex);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkQueuePresentKHR")]
        public extern static Result QueuePresentKHR(
            Queue queue,
            PresentInfoKHR* pPresentInfo);

        public const int KHR_display = 1;
        public struct DisplayKHR { }
        public struct DisplayModeKHR { }

        public const int KHR_DISPLAY_SPEC_VERSION = 21;
        public const string KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";


        public enum DisplayPlaneAlphaFlagBitsKHR {
            VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
            VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002,
            VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004,
            VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
        }

        public struct DisplayPropertiesKHR {
            public DisplayKHR display;
            public char* displayName;
            public Extent2D physicalDimensions;
            public Extent2D physicalResolution;
            public uint VkSurfaceTransformFlagsKHR_supportedTransforms;
            public uint VkBool32_planeReorderPossible;
            public uint VkBool32_persistentContent;
        }

        public struct DisplayModeParametersKHR {
            public Extent2D visibleRegion;
            public uint refreshRate;
        }

        public struct DisplayModePropertiesKHR {
            public DisplayModeKHR displayMode;
            public DisplayModeParametersKHR parameters;
        }

        public struct DisplayModeCreateInfoKHR {
            public StructureType sType;
            public void* pNext;
            public uint VkDisplayModeCreateFlagsKHR_flags;
            public DisplayModeParametersKHR parameters;
        }

        public struct DisplayPlaneCapabilitiesKHR {
            public uint VkDisplayPlaneAlphaFlagsKHR_supportedAlpha;
            public Offset2D minSrcPosition;
            public Offset2D maxSrcPosition;
            public Extent2D minSrcExtent;
            public Extent2D maxSrcExtent;
            public Offset2D minDstPosition;
            public Offset2D maxDstPosition;
            public Extent2D minDstExtent;
            public Extent2D maxDstExtent;
        }

        public struct DisplayPlanePropertiesKHR {
            public DisplayKHR currentDisplay;
            public uint currentStackIndex;
        }

        public struct DisplaySurfaceCreateInfoKHR {
            public StructureType sType;
            public void* pNext;
            public uint VkDisplaySurfaceCreateFlagsKHR_flags;
            public DisplayModeKHR displayMode;
            public uint planeIndex;
            public uint planeStackIndex;
            public SurfaceTransformFlagBitsKHR transform;
            public float globalAlpha;
            public DisplayPlaneAlphaFlagBitsKHR alphaMode;
            public Extent2D imageExtent;
        }


        public delegate Result PFN_vkGetPhysicalDeviceDisplayPropertiesKHR(PhysicalDevice physicalDevice, uint* pPropertyCount, DisplayPropertiesKHR* pProperties);
        public delegate Result PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(PhysicalDevice physicalDevice, uint* pPropertyCount, DisplayPlanePropertiesKHR* pProperties);
        public delegate Result PFN_vkGetDisplayPlaneSupportedDisplaysKHR(PhysicalDevice physicalDevice, uint planeIndex, uint* pDisplayCount, DisplayKHR* pDisplays);
        public delegate Result PFN_vkGetDisplayModePropertiesKHR(PhysicalDevice physicalDevice, DisplayKHR display, uint* pPropertyCount, DisplayModePropertiesKHR* pProperties);
        public delegate Result PFN_vkCreateDisplayModeKHR(PhysicalDevice physicalDevice, DisplayKHR display, DisplayModeCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, DisplayModeKHR* pMode);
        public delegate Result PFN_vkGetDisplayPlaneCapabilitiesKHR(PhysicalDevice physicalDevice, DisplayModeKHR mode, uint planeIndex, DisplayPlaneCapabilitiesKHR* pCapabilities);
        public delegate Result PFN_vkCreateDisplayPlaneSurfaceKHR(Instance instance, DisplaySurfaceCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceDisplayPropertiesKHR")]
        public extern static Result GetPhysicalDeviceDisplayPropertiesKHR(
            PhysicalDevice physicalDevice,
            uint* pPropertyCount,
            DisplayPropertiesKHR* pProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
        public extern static Result GetPhysicalDeviceDisplayPlanePropertiesKHR(
            PhysicalDevice physicalDevice,
            uint* pPropertyCount,
            DisplayPlanePropertiesKHR* pProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetDisplayPlaneSupportedDisplaysKHR")]
        public extern static Result GetDisplayPlaneSupportedDisplaysKHR(
            PhysicalDevice physicalDevice,
            uint planeIndex,
            uint* pDisplayCount,
            DisplayKHR* pDisplays);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetDisplayModePropertiesKHR")]
        public extern static Result GetDisplayModePropertiesKHR(
            PhysicalDevice physicalDevice,
            DisplayKHR display,
            uint* pPropertyCount,
            DisplayModePropertiesKHR* pProperties);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateDisplayModeKHR")]
        public extern static Result CreateDisplayModeKHR(
            PhysicalDevice physicalDevice,
            DisplayKHR display,
            DisplayModeCreateInfoKHR* pCreateInfo,
            AllocationCallbacks* pAllocator,
            DisplayModeKHR* pMode);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkGetDisplayPlaneCapabilitiesKHR")]
        public extern static Result GetDisplayPlaneCapabilitiesKHR(
            PhysicalDevice physicalDevice,
            DisplayModeKHR mode,
            uint planeIndex,
            DisplayPlaneCapabilitiesKHR* pCapabilities);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateDisplayPlaneSurfaceKHR")]
        public extern static Result CreateDisplayPlaneSurfaceKHR(
            Instance instance,
            DisplaySurfaceCreateInfoKHR* pCreateInfo,
            AllocationCallbacks* pAllocator,
            SurfaceKHR* pSurface);

        public const int KHR_display_swapchain = 1;
        public const int KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 9;
        public const string KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";

        public struct DisplayPresentInfoKHR {
            StructureType sType;
            void* pNext;
            Rect2D srcRect;
            Rect2D dstRect;
            uint VkBool32_persistent;
        }


        public delegate Result PFN_vkCreateSharedSwapchainsKHR(Device device, uint swapchainCount, SwapchainCreateInfoKHR* pCreateInfos, AllocationCallbacks* pAllocator, SwapchainKHR* pSwapchains);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateSharedSwapchainsKHR")]
        public extern static Result CreateSharedSwapchainsKHR(
            Device device,
            uint swapchainCount,
            SwapchainCreateInfoKHR* pCreateInfos,
            AllocationCallbacks* pAllocator,
            SwapchainKHR* pSwapchains);

        /*
        #ifdef VK_USE_PLATFORM_WIN32_KHR
        #define VK_KHR_win32_surface 1
        #include <windows.h>

        #define VK_KHR_WIN32_SURFACE_SPEC_VERSION 5
        #define VK_KHR_WIN32_SURFACE_EXTENSION_NAME "VK_KHR_win32_surface"

        typedef Flags Win32SurfaceCreateFlagsKHR;

        typedef struct Win32SurfaceCreateInfoKHR {
            StructureType sType;
            void* pNext;
            Win32SurfaceCreateFlagsKHR flags;
            HINSTANCE hinstance;
            HWND hwnd;
        }
        Win32SurfaceCreateInfoKHR;


        typedef Result(VKAPI_PTR* PFN_vkCreateWin32SurfaceKHR)(Instance instance, Win32SurfaceCreateInfoKHR* pCreateInfo, AllocationCallbacks* pAllocator, SurfaceKHR* pSurface);
        typedef Bool32(VKAPI_PTR* PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(PhysicalDevice physicalDevice, uint queueFamilyIndex);

        #ifndef VK_NO_PROTOTYPES
        VKAPI_ATTR Result VKAPI_CALL vkCreateWin32SurfaceKHR(
            Instance instance,
            Win32SurfaceCreateInfoKHR* pCreateInfo,
            AllocationCallbacks* pAllocator,
            SurfaceKHR* pSurface);

        VKAPI_ATTR Bool32 VKAPI_CALL vkGetPhysicalDeviceWin32PresentationSupportKHR(
            PhysicalDevice physicalDevice,
            uint queueFamilyIndex);
#endif
#endif /* VK_USE_PLATFORM_WIN32_KHR */

        public const int EXT_debug_report = 1;
        public struct DebugReportCallbackEXT { }

        public const int EXT_DEBUG_REPORT_SPEC_VERSION = 1;
        public const string EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";


        public enum DebugReportObjectTypeEXT {
            VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
            VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
            VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
            VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
            VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
            VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
            VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
            VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
            VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
            VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
            VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
            VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
            VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
            VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
            VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
            VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
            VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
            VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
            VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
            VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
            VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
            VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
            VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
            VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
            VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
            VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
            VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
            VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
            VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28,
        }

        public enum DebugReportErrorEXT {
            VK_DEBUG_REPORT_ERROR_NONE_EXT = 0,
            VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT = 1,
        }


        public enum DebugReportFlagBitsEXT {
            VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001,
            VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002,
            VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,
            VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008,
            VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010,
        }

        public delegate uint PFN_vkDebugReportCallbackEXT(
            uint VkDebugReportFlagsEXT_flags,
            DebugReportObjectTypeEXT                  objectType,
            ulong _object,
            uint location,
            int                                     messageCode,
            char* pLayerPrefix,
            char* pMessage,
            void* pUserData);


        public struct DebugReportCallbackCreateInfoEXT {
            public StructureType sType;
            public void* pNext;
            public uint VkDebugReportFlagsEXT_flags;
            public PFN_vkDebugReportCallbackEXT pfnCallback;
            public void* pUserData;
        }

        /*
        public delegate Result PFN_vkCreateDebugReportCallbackEXT(Instance instance, DebugReportCallbackCreateInfoEXT* pCreateInfo, AllocationCallbacks* pAllocator, DebugReportCallbackEXT* pCallback);
        public delegate void PFN_vkDestroyDebugReportCallbackEXT(Instance instance, DebugReportCallbackEXT callback, AllocationCallbacks* pAllocator);
        public delegate void PFN_vkDebugReportMessageEXT(Instance instance, uint VkDebugReportFlagsEXT_flags, DebugReportObjectTypeEXT objectType, ulong _object, uint location, int messageCode, char* pLayerPrefix, char* pMessage);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkCreateDebugReportCallbackEXT")]
        public extern static Result CreateDebugReportCallbackEXT(
            Instance instance,
            DebugReportCallbackCreateInfoEXT* pCreateInfo,
            AllocationCallbacks* pAllocator,
            DebugReportCallbackEXT* pCallback);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDestroyDebugReportCallbackEXT")]
        public extern static void DestroyDebugReportCallbackEXT(
            Instance instance,
            DebugReportCallbackEXT callback,
            AllocationCallbacks* pAllocator);

        [DllImport("Dll\vulkan-1.dll", EntryPoint = "VkDebugReportMessageEXT")]
        public extern static void DebugReportMessageEXT(
            Instance instance,
            uint VkDebugReportFlagsEXT_flags,
            DebugReportObjectTypeEXT objectType,
            ulong                                    _object,
            uint location,
            int messageCode,
            char* pLayerPrefix,
            char* pMessage);
            */
    }
}
